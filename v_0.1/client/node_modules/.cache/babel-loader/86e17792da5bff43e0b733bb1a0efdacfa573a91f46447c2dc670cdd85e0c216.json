{"ast":null,"code":"'use strict';\n\nconst {\n  PassThrough\n} = require('stream');\nmodule.exports = options => {\n  options = Object.assign({}, options);\n  const {\n    array\n  } = options;\n  let {\n    encoding\n  } = options;\n  const buffer = encoding === 'buffer';\n  let objectMode = false;\n  if (array) {\n    objectMode = !(encoding || buffer);\n  } else {\n    encoding = encoding || 'utf8';\n  }\n  if (buffer) {\n    encoding = null;\n  }\n  let len = 0;\n  const ret = [];\n  const stream = new PassThrough({\n    objectMode\n  });\n  if (encoding) {\n    stream.setEncoding(encoding);\n  }\n  stream.on('data', chunk => {\n    ret.push(chunk);\n    if (objectMode) {\n      len = ret.length;\n    } else {\n      len += chunk.length;\n    }\n  });\n  stream.getBufferedValue = () => {\n    if (array) {\n      return ret;\n    }\n    return buffer ? Buffer.concat(ret, len) : ret.join('');\n  };\n  stream.getBufferedLength = () => len;\n  return stream;\n};","map":{"version":3,"names":["PassThrough","require","module","exports","options","Object","assign","array","encoding","buffer","objectMode","len","ret","stream","setEncoding","on","chunk","push","length","getBufferedValue","Buffer","concat","join","getBufferedLength"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/got/node_modules/get-stream/buffer-stream.js"],"sourcesContent":["'use strict';\nconst {PassThrough} = require('stream');\n\nmodule.exports = options => {\n\toptions = Object.assign({}, options);\n\n\tconst {array} = options;\n\tlet {encoding} = options;\n\tconst buffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || buffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (buffer) {\n\t\tencoding = null;\n\t}\n\n\tlet len = 0;\n\tconst ret = [];\n\tconst stream = new PassThrough({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tstream.on('data', chunk => {\n\t\tret.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlen = ret.length;\n\t\t} else {\n\t\t\tlen += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn buffer ? Buffer.concat(ret, len) : ret.join('');\n\t};\n\n\tstream.getBufferedLength = () => len;\n\n\treturn stream;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAACA;AAAW,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAGC,OAAO,IAAI;EAC3BA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,OAAO,CAAC;EAEpC,MAAM;IAACG;EAAK,CAAC,GAAGH,OAAO;EACvB,IAAI;IAACI;EAAQ,CAAC,GAAGJ,OAAO;EACxB,MAAMK,MAAM,GAAGD,QAAQ,KAAK,QAAQ;EACpC,IAAIE,UAAU,GAAG,KAAK;EAEtB,IAAIH,KAAK,EAAE;IACVG,UAAU,GAAG,EAAEF,QAAQ,IAAIC,MAAM,CAAC;EACnC,CAAC,MAAM;IACND,QAAQ,GAAGA,QAAQ,IAAI,MAAM;EAC9B;EAEA,IAAIC,MAAM,EAAE;IACXD,QAAQ,GAAG,IAAI;EAChB;EAEA,IAAIG,GAAG,GAAG,CAAC;EACX,MAAMC,GAAG,GAAG,EAAE;EACd,MAAMC,MAAM,GAAG,IAAIb,WAAW,CAAC;IAACU;EAAU,CAAC,CAAC;EAE5C,IAAIF,QAAQ,EAAE;IACbK,MAAM,CAACC,WAAW,CAACN,QAAQ,CAAC;EAC7B;EAEAK,MAAM,CAACE,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;IAC1BJ,GAAG,CAACK,IAAI,CAACD,KAAK,CAAC;IAEf,IAAIN,UAAU,EAAE;MACfC,GAAG,GAAGC,GAAG,CAACM,MAAM;IACjB,CAAC,MAAM;MACNP,GAAG,IAAIK,KAAK,CAACE,MAAM;IACpB;EACD,CAAC,CAAC;EAEFL,MAAM,CAACM,gBAAgB,GAAG,MAAM;IAC/B,IAAIZ,KAAK,EAAE;MACV,OAAOK,GAAG;IACX;IAEA,OAAOH,MAAM,GAAGW,MAAM,CAACC,MAAM,CAACT,GAAG,EAAED,GAAG,CAAC,GAAGC,GAAG,CAACU,IAAI,CAAC,EAAE,CAAC;EACvD,CAAC;EAEDT,MAAM,CAACU,iBAAiB,GAAG,MAAMZ,GAAG;EAEpC,OAAOE,MAAM;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}