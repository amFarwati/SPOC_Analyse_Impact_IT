import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useSlotProps } from '@mui/base/utils';
import { unstable_composeClasses as composeClasses } from '@mui/utils';
import { useThemeProps, useTheme, styled } from '@mui/material/styles';
import { DrawingContext } from '../context/DrawingProvider';
import { getSeriesToDisplay } from './utils';
import { SeriesContext } from '../context/SeriesContextProvider';
import { getChartsLegendUtilityClass } from './chartsLegendClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    direction = ownerState.direction;
  var slots = {
    root: ['root', direction],
    mark: ['mark'],
    label: ['label'],
    series: ['series']
  };
  return composeClasses(slots, getChartsLegendUtilityClass, classes);
};
function getTranslePosition(_ref) {
  var position = _ref.position,
    drawingArea = _ref.drawingArea;
  var xValue;
  switch (position.horizontal) {
    case 'left':
      xValue = "calc(var(--ChartsLegend-rootOffsetX, 0px) + ".concat(drawingArea.left, "px - var(--ChartsLegend-rootWidth))");
      break;
    case 'middle':
      xValue = "calc(var(--ChartsLegend-rootOffsetX, 0px) + ".concat(drawingArea.left + drawingArea.width / 2, "px - 0.5 * var(--ChartsLegend-rootWidth))");
      break;
    default:
      xValue = "calc(var(--ChartsLegend-rootOffsetX, 0px) + ".concat(drawingArea.left + drawingArea.width, "px)");
      break;
  }
  var yValue;
  switch (position.vertical) {
    case 'top':
      yValue = "calc(var(--ChartsLegend-rootOffsetY, 0px) + ".concat(drawingArea.top, "px - var(--ChartsLegend-rootHeight))");
      break;
    case 'middle':
      yValue = "calc(var(--ChartsLegend-rootOffsetY, 0px) + ".concat(drawingArea.top + drawingArea.height / 2, "px - 0.5 * var(--ChartsLegend-rootHeight))");
      break;
    default:
      yValue = "calc(var(--ChartsLegend-rootOffsetY, 0px) + ".concat(drawingArea.top + drawingArea.height, "px)");
      break;
  }
  return {
    transform: "translate(".concat(xValue, ", ").concat(yValue, ")")
  };
}
export var ChartsLegendRoot = styled('g', {
  name: 'MuiChartsLegend',
  slot: 'Root',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.root;
  }
})(function (_ref2) {
  var ownerState = _ref2.ownerState;
  var direction = ownerState.direction,
    drawingArea = ownerState.drawingArea,
    offsetX = ownerState.offsetX,
    offsetY = ownerState.offsetY,
    seriesNumber = ownerState.seriesNumber,
    position = ownerState.position;
  return _extends({
    '--ChartsLegend-rootOffsetX': typeof offsetX === 'number' ? "".concat(offsetX, "px") : undefined,
    '--ChartsLegend-rootOffsetY': typeof offsetY === 'number' ? "".concat(offsetY, "px") : undefined,
    '--ChartsLegend-rootWidth': direction === 'row' ? "calc(var(--ChartsLegend-itemWidth) * ".concat(seriesNumber, " + var(--ChartsLegend-rootSpacing) * ").concat(seriesNumber - 1, " )") : 'var(--ChartsLegend-itemWidth)',
    '--ChartsLegend-rootHeight': direction === 'row' ? 'var(--ChartsLegend-itemMarkSize)' : "calc(var(--ChartsLegend-itemMarkSize) * ".concat(seriesNumber, " + var(--ChartsLegend-rootSpacing) * ").concat(seriesNumber - 1, " )")
  }, getTranslePosition({
    position: position,
    drawingArea: drawingArea,
    offsetX: offsetX,
    offsetY: offsetY
  }));
});
export var ChartsSeriesLegendGroup = styled('g', {
  name: 'MuiChartsLegend',
  slot: 'ChartsSeriesLegendGroup',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.series;
  }
})(function (_ref3) {
  var ownerState = _ref3.ownerState;
  var direction = ownerState.direction,
    seriesIndex = ownerState.seriesIndex;
  if (direction === 'row') {
    return {
      transform: "translate(calc(".concat(seriesIndex, " * (var(--ChartsLegend-itemWidth) + var(--ChartsLegend-rootSpacing))), 0)")
    };
  }
  return {
    transform: "translate(0, calc(".concat(seriesIndex, " * (var(--ChartsLegend-itemMarkSize) + var(--ChartsLegend-rootSpacing))))")
  };
});
export var ChartsLegendMark = styled('rect', {
  name: 'MuiChartsLegend',
  slot: 'Mark',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.mark;
  }
})(function (_ref4) {
  var ownerState = _ref4.ownerState;
  return {
    x: 0,
    y: 0,
    width: 'var(--ChartsLegend-itemMarkSize)',
    height: 'var(--ChartsLegend-itemMarkSize)',
    fill: ownerState.color
  };
});
export var ChartsLegendLabel = styled('text', {
  name: 'MuiChartsLegend',
  slot: 'Label',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.label;
  }
})(function (_ref5) {
  var theme = _ref5.theme;
  return _extends({}, theme.typography.body1, {
    color: 'inherit',
    transform: "translate(\n      calc(var(--ChartsLegend-itemMarkSize) + var(--ChartsLegend-labelSpacing)),\n      calc(0.5 * var(--ChartsLegend-itemMarkSize))\n      )",
    fill: theme.palette.text.primary,
    dominantBaseline: 'central'
  });
});
var defaultProps = {
  position: {
    horizontal: 'middle',
    vertical: 'top'
  },
  direction: 'row',
  markSize: 20,
  itemWidth: 100,
  spacing: 2
};
function DefaultChartsLegend(props) {
  var hidden = props.hidden,
    position = props.position,
    direction = props.direction,
    offset = props.offset,
    series = props.series,
    seriesToDisplay = props.seriesToDisplay,
    drawingArea = props.drawingArea,
    classes = props.classes;
  if (hidden) {
    return null;
  }
  return /*#__PURE__*/_jsx(ChartsLegendRoot, {
    ownerState: {
      direction: direction,
      offsetX: offset == null ? void 0 : offset.x,
      offsetY: offset == null ? void 0 : offset.y,
      seriesNumber: seriesToDisplay.length,
      position: position,
      drawingArea: drawingArea
    },
    className: classes.root,
    children: seriesToDisplay.map(function (_ref6, seriesIndex) {
      var id = _ref6.id,
        label = _ref6.label,
        color = _ref6.color;
      return /*#__PURE__*/_jsxs(ChartsSeriesLegendGroup, {
        ownerState: _extends({
          direction: direction,
          seriesIndex: seriesIndex
        }, series),
        className: classes.series,
        children: [/*#__PURE__*/_jsx(ChartsLegendMark, {
          ownerState: {
            color: color
          },
          className: classes.mark
        }), /*#__PURE__*/_jsx(ChartsLegendLabel, {
          className: classes.label,
          children: label
        })]
      }, id);
    })
  });
}
export function ChartsLegend(inProps) {
  var _slots$legend;
  var props = useThemeProps({
    props: _extends({}, defaultProps, inProps),
    name: 'MuiChartsLegend'
  });
  var position = props.position,
    direction = props.direction,
    offset = props.offset,
    hidden = props.hidden,
    slots = props.slots,
    slotProps = props.slotProps;
  var theme = useTheme();
  var classes = useUtilityClasses(_extends({}, props, {
    theme: theme
  }));
  var drawingArea = React.useContext(DrawingContext);
  var series = React.useContext(SeriesContext);
  var seriesToDisplay = getSeriesToDisplay(series);
  var ChartLegendRender = (_slots$legend = slots == null ? void 0 : slots.legend) != null ? _slots$legend : DefaultChartsLegend;
  var chartLegendRenderProps = useSlotProps({
    elementType: ChartLegendRender,
    externalSlotProps: slotProps == null ? void 0 : slotProps.legend,
    additionalProps: {
      position: position,
      direction: direction,
      offset: offset,
      classes: classes,
      drawingArea: drawingArea,
      series: series,
      hidden: hidden,
      seriesToDisplay: seriesToDisplay
    },
    ownerState: {}
  });
  return /*#__PURE__*/_jsx(ChartLegendRender, _extends({}, chartLegendRenderProps));
}