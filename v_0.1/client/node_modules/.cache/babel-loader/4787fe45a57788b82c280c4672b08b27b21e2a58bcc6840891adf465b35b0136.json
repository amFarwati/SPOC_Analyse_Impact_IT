{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('url'); // TODO: Use the `URL` global when targeting Node.js 10\nconst util = require('util');\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst urlLib = require('url');\nconst CacheableRequest = require('cacheable-request');\nconst toReadableStream = require('to-readable-stream');\nconst is = require('@sindresorhus/is');\nconst timer = require('@szmarczak/http-timer');\nconst timedOut = require('./utils/timed-out');\nconst getBodySize = require('./utils/get-body-size');\nconst getResponse = require('./get-response');\nconst progress = require('./progress');\nconst {\n  CacheError,\n  UnsupportedProtocolError,\n  MaxRedirectsError,\n  RequestError,\n  TimeoutError\n} = require('./errors');\nconst urlToOptions = require('./utils/url-to-options');\nconst getMethodRedirectCodes = new Set([300, 301, 302, 303, 304, 305, 307, 308]);\nconst allMethodRedirectCodes = new Set([300, 303, 307, 308]);\nmodule.exports = (options, input) => {\n  const emitter = new EventEmitter();\n  const redirects = [];\n  let currentRequest;\n  let requestUrl;\n  let redirectString;\n  let uploadBodySize;\n  let retryCount = 0;\n  let shouldAbort = false;\n  const setCookie = options.cookieJar ? util.promisify(options.cookieJar.setCookie.bind(options.cookieJar)) : null;\n  const getCookieString = options.cookieJar ? util.promisify(options.cookieJar.getCookieString.bind(options.cookieJar)) : null;\n  const agents = is.object(options.agent) ? options.agent : null;\n  const emitError = async error => {\n    try {\n      for (const hook of options.hooks.beforeError) {\n        // eslint-disable-next-line no-await-in-loop\n        error = await hook(error);\n      }\n      emitter.emit('error', error);\n    } catch (error2) {\n      emitter.emit('error', error2);\n    }\n  };\n  const get = async options => {\n    const currentUrl = redirectString || requestUrl;\n    if (options.protocol !== 'http:' && options.protocol !== 'https:') {\n      throw new UnsupportedProtocolError(options);\n    }\n    decodeURI(currentUrl);\n    let fn;\n    if (is.function(options.request)) {\n      fn = {\n        request: options.request\n      };\n    } else {\n      fn = options.protocol === 'https:' ? https : http;\n    }\n    if (agents) {\n      const protocolName = options.protocol === 'https:' ? 'https' : 'http';\n      options.agent = agents[protocolName] || options.agent;\n    }\n\n    /* istanbul ignore next: electron.net is broken */\n    if (options.useElectronNet && process.versions.electron) {\n      const r = {\n        x: require\n      }['yx'.slice(1)]; // Trick webpack\n      const electron = r('electron');\n      fn = electron.net || electron.remote.net;\n    }\n    if (options.cookieJar) {\n      const cookieString = await getCookieString(currentUrl, {});\n      if (is.nonEmptyString(cookieString)) {\n        options.headers.cookie = cookieString;\n      }\n    }\n    let timings;\n    const handleResponse = async response => {\n      try {\n        /* istanbul ignore next: fixes https://github.com/electron/electron/blob/cbb460d47628a7a146adf4419ed48550a98b2923/lib/browser/api/net.js#L59-L65 */\n        if (options.useElectronNet) {\n          response = new Proxy(response, {\n            get: (target, name) => {\n              if (name === 'trailers' || name === 'rawTrailers') {\n                return [];\n              }\n              const value = target[name];\n              return is.function(value) ? value.bind(target) : value;\n            }\n          });\n        }\n        const {\n          statusCode\n        } = response;\n        response.url = currentUrl;\n        response.requestUrl = requestUrl;\n        response.retryCount = retryCount;\n        response.timings = timings;\n        response.redirectUrls = redirects;\n        response.request = {\n          gotOptions: options\n        };\n        const rawCookies = response.headers['set-cookie'];\n        if (options.cookieJar && rawCookies) {\n          await Promise.all(rawCookies.map(rawCookie => setCookie(rawCookie, response.url)));\n        }\n        if (options.followRedirect && 'location' in response.headers) {\n          if (allMethodRedirectCodes.has(statusCode) || getMethodRedirectCodes.has(statusCode) && (options.method === 'GET' || options.method === 'HEAD')) {\n            response.resume(); // We're being redirected, we don't care about the response.\n\n            if (statusCode === 303) {\n              // Server responded with \"see other\", indicating that the resource exists at another location,\n              // and the client should request it from that location via GET or HEAD.\n              options.method = 'GET';\n            }\n            if (redirects.length >= 10) {\n              throw new MaxRedirectsError(statusCode, redirects, options);\n            }\n\n            // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n            const redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();\n            const redirectURL = new URL(redirectBuffer, currentUrl);\n            redirectString = redirectURL.toString();\n            redirects.push(redirectString);\n            const redirectOptions = {\n              ...options,\n              ...urlToOptions(redirectURL)\n            };\n            for (const hook of options.hooks.beforeRedirect) {\n              // eslint-disable-next-line no-await-in-loop\n              await hook(redirectOptions);\n            }\n            emitter.emit('redirect', response, redirectOptions);\n            await get(redirectOptions);\n            return;\n          }\n        }\n        getResponse(response, options, emitter);\n      } catch (error) {\n        emitError(error);\n      }\n    };\n    const handleRequest = request => {\n      if (shouldAbort) {\n        request.once('error', () => {});\n        request.abort();\n        return;\n      }\n      currentRequest = request;\n      request.once('error', error => {\n        if (request.aborted) {\n          return;\n        }\n        if (error instanceof timedOut.TimeoutError) {\n          error = new TimeoutError(error, options);\n        } else {\n          error = new RequestError(error, options);\n        }\n        if (emitter.retry(error) === false) {\n          emitError(error);\n        }\n      });\n      timings = timer(request);\n      progress.upload(request, emitter, uploadBodySize);\n      if (options.gotTimeout) {\n        timedOut(request, options.gotTimeout, options);\n      }\n      emitter.emit('request', request);\n      const uploadComplete = () => {\n        request.emit('upload-complete');\n      };\n      try {\n        if (is.nodeStream(options.body)) {\n          options.body.once('end', uploadComplete);\n          options.body.pipe(request);\n          options.body = undefined;\n        } else if (options.body) {\n          request.end(options.body, uploadComplete);\n        } else if (input && (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH')) {\n          input.once('end', uploadComplete);\n          input.pipe(request);\n        } else {\n          request.end(uploadComplete);\n        }\n      } catch (error) {\n        emitError(new RequestError(error, options));\n      }\n    };\n    if (options.cache) {\n      const cacheableRequest = new CacheableRequest(fn.request, options.cache);\n      const cacheRequest = cacheableRequest(options, handleResponse);\n      cacheRequest.once('error', error => {\n        if (error instanceof CacheableRequest.RequestError) {\n          emitError(new RequestError(error, options));\n        } else {\n          emitError(new CacheError(error, options));\n        }\n      });\n      cacheRequest.once('request', handleRequest);\n    } else {\n      // Catches errors thrown by calling fn.request(...)\n      try {\n        handleRequest(fn.request(options, handleResponse));\n      } catch (error) {\n        emitError(new RequestError(error, options));\n      }\n    }\n  };\n  emitter.retry = error => {\n    let backoff;\n    try {\n      backoff = options.retry.retries(++retryCount, error);\n    } catch (error2) {\n      emitError(error2);\n      return;\n    }\n    if (backoff) {\n      const retry = async options => {\n        try {\n          for (const hook of options.hooks.beforeRetry) {\n            // eslint-disable-next-line no-await-in-loop\n            await hook(options, error, retryCount);\n          }\n          await get(options);\n        } catch (error) {\n          emitError(error);\n        }\n      };\n      setTimeout(retry, backoff, {\n        ...options,\n        forceRefresh: true\n      });\n      return true;\n    }\n    return false;\n  };\n  emitter.abort = () => {\n    if (currentRequest) {\n      currentRequest.once('error', () => {});\n      currentRequest.abort();\n    } else {\n      shouldAbort = true;\n    }\n  };\n  setImmediate(async () => {\n    try {\n      // Convert buffer to stream to receive upload progress events (#322)\n      const {\n        body\n      } = options;\n      if (is.buffer(body)) {\n        options.body = toReadableStream(body);\n        uploadBodySize = body.length;\n      } else {\n        uploadBodySize = await getBodySize(options);\n      }\n      if (is.undefined(options.headers['content-length']) && is.undefined(options.headers['transfer-encoding'])) {\n        if ((uploadBodySize > 0 || options.method === 'PUT') && !is.null(uploadBodySize)) {\n          options.headers['content-length'] = uploadBodySize;\n        }\n      }\n      for (const hook of options.hooks.beforeRequest) {\n        // eslint-disable-next-line no-await-in-loop\n        await hook(options);\n      }\n      requestUrl = options.href || new URL(options.path, urlLib.format(options)).toString();\n      await get(options);\n    } catch (error) {\n      emitError(error);\n    }\n  });\n  return emitter;\n};","map":{"version":3,"names":["URL","require","util","EventEmitter","http","https","urlLib","CacheableRequest","toReadableStream","is","timer","timedOut","getBodySize","getResponse","progress","CacheError","UnsupportedProtocolError","MaxRedirectsError","RequestError","TimeoutError","urlToOptions","getMethodRedirectCodes","Set","allMethodRedirectCodes","module","exports","options","input","emitter","redirects","currentRequest","requestUrl","redirectString","uploadBodySize","retryCount","shouldAbort","setCookie","cookieJar","promisify","bind","getCookieString","agents","object","agent","emitError","error","hook","hooks","beforeError","emit","error2","get","currentUrl","protocol","decodeURI","fn","function","request","protocolName","useElectronNet","process","versions","electron","r","x","slice","net","remote","cookieString","nonEmptyString","headers","cookie","timings","handleResponse","response","Proxy","target","name","value","statusCode","url","redirectUrls","gotOptions","rawCookies","Promise","all","map","rawCookie","followRedirect","has","method","resume","length","redirectBuffer","Buffer","from","location","toString","redirectURL","push","redirectOptions","beforeRedirect","handleRequest","once","abort","aborted","retry","upload","gotTimeout","uploadComplete","nodeStream","body","pipe","undefined","end","cache","cacheableRequest","cacheRequest","backoff","retries","beforeRetry","setTimeout","forceRefresh","setImmediate","buffer","null","beforeRequest","href","path","format"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/got/source/request-as-event-emitter.js"],"sourcesContent":["'use strict';\nconst {URL} = require('url'); // TODO: Use the `URL` global when targeting Node.js 10\nconst util = require('util');\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst urlLib = require('url');\nconst CacheableRequest = require('cacheable-request');\nconst toReadableStream = require('to-readable-stream');\nconst is = require('@sindresorhus/is');\nconst timer = require('@szmarczak/http-timer');\nconst timedOut = require('./utils/timed-out');\nconst getBodySize = require('./utils/get-body-size');\nconst getResponse = require('./get-response');\nconst progress = require('./progress');\nconst {CacheError, UnsupportedProtocolError, MaxRedirectsError, RequestError, TimeoutError} = require('./errors');\nconst urlToOptions = require('./utils/url-to-options');\n\nconst getMethodRedirectCodes = new Set([300, 301, 302, 303, 304, 305, 307, 308]);\nconst allMethodRedirectCodes = new Set([300, 303, 307, 308]);\n\nmodule.exports = (options, input) => {\n\tconst emitter = new EventEmitter();\n\tconst redirects = [];\n\tlet currentRequest;\n\tlet requestUrl;\n\tlet redirectString;\n\tlet uploadBodySize;\n\tlet retryCount = 0;\n\tlet shouldAbort = false;\n\n\tconst setCookie = options.cookieJar ? util.promisify(options.cookieJar.setCookie.bind(options.cookieJar)) : null;\n\tconst getCookieString = options.cookieJar ? util.promisify(options.cookieJar.getCookieString.bind(options.cookieJar)) : null;\n\tconst agents = is.object(options.agent) ? options.agent : null;\n\n\tconst emitError = async error => {\n\t\ttry {\n\t\t\tfor (const hook of options.hooks.beforeError) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\terror = await hook(error);\n\t\t\t}\n\n\t\t\temitter.emit('error', error);\n\t\t} catch (error2) {\n\t\t\temitter.emit('error', error2);\n\t\t}\n\t};\n\n\tconst get = async options => {\n\t\tconst currentUrl = redirectString || requestUrl;\n\n\t\tif (options.protocol !== 'http:' && options.protocol !== 'https:') {\n\t\t\tthrow new UnsupportedProtocolError(options);\n\t\t}\n\n\t\tdecodeURI(currentUrl);\n\n\t\tlet fn;\n\t\tif (is.function(options.request)) {\n\t\t\tfn = {request: options.request};\n\t\t} else {\n\t\t\tfn = options.protocol === 'https:' ? https : http;\n\t\t}\n\n\t\tif (agents) {\n\t\t\tconst protocolName = options.protocol === 'https:' ? 'https' : 'http';\n\t\t\toptions.agent = agents[protocolName] || options.agent;\n\t\t}\n\n\t\t/* istanbul ignore next: electron.net is broken */\n\t\tif (options.useElectronNet && process.versions.electron) {\n\t\t\tconst r = ({x: require})['yx'.slice(1)]; // Trick webpack\n\t\t\tconst electron = r('electron');\n\t\t\tfn = electron.net || electron.remote.net;\n\t\t}\n\n\t\tif (options.cookieJar) {\n\t\t\tconst cookieString = await getCookieString(currentUrl, {});\n\n\t\t\tif (is.nonEmptyString(cookieString)) {\n\t\t\t\toptions.headers.cookie = cookieString;\n\t\t\t}\n\t\t}\n\n\t\tlet timings;\n\t\tconst handleResponse = async response => {\n\t\t\ttry {\n\t\t\t\t/* istanbul ignore next: fixes https://github.com/electron/electron/blob/cbb460d47628a7a146adf4419ed48550a98b2923/lib/browser/api/net.js#L59-L65 */\n\t\t\t\tif (options.useElectronNet) {\n\t\t\t\t\tresponse = new Proxy(response, {\n\t\t\t\t\t\tget: (target, name) => {\n\t\t\t\t\t\t\tif (name === 'trailers' || name === 'rawTrailers') {\n\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst value = target[name];\n\t\t\t\t\t\t\treturn is.function(value) ? value.bind(target) : value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst {statusCode} = response;\n\t\t\t\tresponse.url = currentUrl;\n\t\t\t\tresponse.requestUrl = requestUrl;\n\t\t\t\tresponse.retryCount = retryCount;\n\t\t\t\tresponse.timings = timings;\n\t\t\t\tresponse.redirectUrls = redirects;\n\t\t\t\tresponse.request = {\n\t\t\t\t\tgotOptions: options\n\t\t\t\t};\n\n\t\t\t\tconst rawCookies = response.headers['set-cookie'];\n\t\t\t\tif (options.cookieJar && rawCookies) {\n\t\t\t\t\tawait Promise.all(rawCookies.map(rawCookie => setCookie(rawCookie, response.url)));\n\t\t\t\t}\n\n\t\t\t\tif (options.followRedirect && 'location' in response.headers) {\n\t\t\t\t\tif (allMethodRedirectCodes.has(statusCode) || (getMethodRedirectCodes.has(statusCode) && (options.method === 'GET' || options.method === 'HEAD'))) {\n\t\t\t\t\t\tresponse.resume(); // We're being redirected, we don't care about the response.\n\n\t\t\t\t\t\tif (statusCode === 303) {\n\t\t\t\t\t\t\t// Server responded with \"see other\", indicating that the resource exists at another location,\n\t\t\t\t\t\t\t// and the client should request it from that location via GET or HEAD.\n\t\t\t\t\t\t\toptions.method = 'GET';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (redirects.length >= 10) {\n\t\t\t\t\t\t\tthrow new MaxRedirectsError(statusCode, redirects, options);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n\t\t\t\t\t\tconst redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();\n\t\t\t\t\t\tconst redirectURL = new URL(redirectBuffer, currentUrl);\n\t\t\t\t\t\tredirectString = redirectURL.toString();\n\n\t\t\t\t\t\tredirects.push(redirectString);\n\n\t\t\t\t\t\tconst redirectOptions = {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\t...urlToOptions(redirectURL)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor (const hook of options.hooks.beforeRedirect) {\n\t\t\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\t\t\tawait hook(redirectOptions);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\temitter.emit('redirect', response, redirectOptions);\n\n\t\t\t\t\t\tawait get(redirectOptions);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tgetResponse(response, options, emitter);\n\t\t\t} catch (error) {\n\t\t\t\temitError(error);\n\t\t\t}\n\t\t};\n\n\t\tconst handleRequest = request => {\n\t\t\tif (shouldAbort) {\n\t\t\t\trequest.once('error', () => {});\n\t\t\t\trequest.abort();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcurrentRequest = request;\n\n\t\t\trequest.once('error', error => {\n\t\t\t\tif (request.aborted) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof timedOut.TimeoutError) {\n\t\t\t\t\terror = new TimeoutError(error, options);\n\t\t\t\t} else {\n\t\t\t\t\terror = new RequestError(error, options);\n\t\t\t\t}\n\n\t\t\t\tif (emitter.retry(error) === false) {\n\t\t\t\t\temitError(error);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttimings = timer(request);\n\n\t\t\tprogress.upload(request, emitter, uploadBodySize);\n\n\t\t\tif (options.gotTimeout) {\n\t\t\t\ttimedOut(request, options.gotTimeout, options);\n\t\t\t}\n\n\t\t\temitter.emit('request', request);\n\n\t\t\tconst uploadComplete = () => {\n\t\t\t\trequest.emit('upload-complete');\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (is.nodeStream(options.body)) {\n\t\t\t\t\toptions.body.once('end', uploadComplete);\n\t\t\t\t\toptions.body.pipe(request);\n\t\t\t\t\toptions.body = undefined;\n\t\t\t\t} else if (options.body) {\n\t\t\t\t\trequest.end(options.body, uploadComplete);\n\t\t\t\t} else if (input && (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH')) {\n\t\t\t\t\tinput.once('end', uploadComplete);\n\t\t\t\t\tinput.pipe(request);\n\t\t\t\t} else {\n\t\t\t\t\trequest.end(uploadComplete);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\temitError(new RequestError(error, options));\n\t\t\t}\n\t\t};\n\n\t\tif (options.cache) {\n\t\t\tconst cacheableRequest = new CacheableRequest(fn.request, options.cache);\n\t\t\tconst cacheRequest = cacheableRequest(options, handleResponse);\n\n\t\t\tcacheRequest.once('error', error => {\n\t\t\t\tif (error instanceof CacheableRequest.RequestError) {\n\t\t\t\t\temitError(new RequestError(error, options));\n\t\t\t\t} else {\n\t\t\t\t\temitError(new CacheError(error, options));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcacheRequest.once('request', handleRequest);\n\t\t} else {\n\t\t\t// Catches errors thrown by calling fn.request(...)\n\t\t\ttry {\n\t\t\t\thandleRequest(fn.request(options, handleResponse));\n\t\t\t} catch (error) {\n\t\t\t\temitError(new RequestError(error, options));\n\t\t\t}\n\t\t}\n\t};\n\n\temitter.retry = error => {\n\t\tlet backoff;\n\n\t\ttry {\n\t\t\tbackoff = options.retry.retries(++retryCount, error);\n\t\t} catch (error2) {\n\t\t\temitError(error2);\n\t\t\treturn;\n\t\t}\n\n\t\tif (backoff) {\n\t\t\tconst retry = async options => {\n\t\t\t\ttry {\n\t\t\t\t\tfor (const hook of options.hooks.beforeRetry) {\n\t\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\t\tawait hook(options, error, retryCount);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait get(options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\temitError(error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsetTimeout(retry, backoff, {...options, forceRefresh: true});\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\temitter.abort = () => {\n\t\tif (currentRequest) {\n\t\t\tcurrentRequest.once('error', () => {});\n\t\t\tcurrentRequest.abort();\n\t\t} else {\n\t\t\tshouldAbort = true;\n\t\t}\n\t};\n\n\tsetImmediate(async () => {\n\t\ttry {\n\t\t\t// Convert buffer to stream to receive upload progress events (#322)\n\t\t\tconst {body} = options;\n\t\t\tif (is.buffer(body)) {\n\t\t\t\toptions.body = toReadableStream(body);\n\t\t\t\tuploadBodySize = body.length;\n\t\t\t} else {\n\t\t\t\tuploadBodySize = await getBodySize(options);\n\t\t\t}\n\n\t\t\tif (is.undefined(options.headers['content-length']) && is.undefined(options.headers['transfer-encoding'])) {\n\t\t\t\tif ((uploadBodySize > 0 || options.method === 'PUT') && !is.null(uploadBodySize)) {\n\t\t\t\t\toptions.headers['content-length'] = uploadBodySize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const hook of options.hooks.beforeRequest) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tawait hook(options);\n\t\t\t}\n\n\t\t\trequestUrl = options.href || (new URL(options.path, urlLib.format(options))).toString();\n\n\t\t\tawait get(options);\n\t\t} catch (error) {\n\t\t\temitError(error);\n\t\t}\n\t});\n\n\treturn emitter;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}