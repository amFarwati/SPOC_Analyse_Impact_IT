{"ast":null,"code":"'use strict';\n\nconst {\n  PassThrough\n} = require('stream');\nconst duplexer3 = require('duplexer3');\nconst requestAsEventEmitter = require('./request-as-event-emitter');\nconst {\n  HTTPError,\n  ReadError\n} = require('./errors');\nmodule.exports = options => {\n  const input = new PassThrough();\n  const output = new PassThrough();\n  const proxy = duplexer3(input, output);\n  const piped = new Set();\n  let isFinished = false;\n  options.retry.retries = () => 0;\n  if (options.body) {\n    proxy.write = () => {\n      throw new Error('Got\\'s stream is not writable when the `body` option is used');\n    };\n  }\n  const emitter = requestAsEventEmitter(options, input);\n\n  // Cancels the request\n  proxy._destroy = emitter.abort;\n  emitter.on('response', response => {\n    const {\n      statusCode\n    } = response;\n    response.on('error', error => {\n      proxy.emit('error', new ReadError(error, options));\n    });\n    if (options.throwHttpErrors && statusCode !== 304 && (statusCode < 200 || statusCode > 299)) {\n      proxy.emit('error', new HTTPError(response, options), null, response);\n      return;\n    }\n    isFinished = true;\n    response.pipe(output);\n    for (const destination of piped) {\n      if (destination.headersSent) {\n        continue;\n      }\n      for (const [key, value] of Object.entries(response.headers)) {\n        // Got gives *decompressed* data. Overriding `content-encoding` header would result in an error.\n        // It's not possible to decompress already decompressed data, is it?\n        const allowed = options.decompress ? key !== 'content-encoding' : true;\n        if (allowed) {\n          destination.setHeader(key, value);\n        }\n      }\n      destination.statusCode = response.statusCode;\n    }\n    proxy.emit('response', response);\n  });\n  ['error', 'request', 'redirect', 'uploadProgress', 'downloadProgress'].forEach(event => emitter.on(event, (...args) => proxy.emit(event, ...args)));\n  const pipe = proxy.pipe.bind(proxy);\n  const unpipe = proxy.unpipe.bind(proxy);\n  proxy.pipe = (destination, options) => {\n    if (isFinished) {\n      throw new Error('Failed to pipe. The response has been emitted already.');\n    }\n    const result = pipe(destination, options);\n    if (Reflect.has(destination, 'setHeader')) {\n      piped.add(destination);\n    }\n    return result;\n  };\n  proxy.unpipe = stream => {\n    piped.delete(stream);\n    return unpipe(stream);\n  };\n  return proxy;\n};","map":{"version":3,"names":["PassThrough","require","duplexer3","requestAsEventEmitter","HTTPError","ReadError","module","exports","options","input","output","proxy","piped","Set","isFinished","retry","retries","body","write","Error","emitter","_destroy","abort","on","response","statusCode","error","emit","throwHttpErrors","pipe","destination","headersSent","key","value","Object","entries","headers","allowed","decompress","setHeader","forEach","event","args","bind","unpipe","result","Reflect","has","add","stream","delete"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/got/source/as-stream.js"],"sourcesContent":["'use strict';\nconst {PassThrough} = require('stream');\nconst duplexer3 = require('duplexer3');\nconst requestAsEventEmitter = require('./request-as-event-emitter');\nconst {HTTPError, ReadError} = require('./errors');\n\nmodule.exports = options => {\n\tconst input = new PassThrough();\n\tconst output = new PassThrough();\n\tconst proxy = duplexer3(input, output);\n\tconst piped = new Set();\n\tlet isFinished = false;\n\n\toptions.retry.retries = () => 0;\n\n\tif (options.body) {\n\t\tproxy.write = () => {\n\t\t\tthrow new Error('Got\\'s stream is not writable when the `body` option is used');\n\t\t};\n\t}\n\n\tconst emitter = requestAsEventEmitter(options, input);\n\n\t// Cancels the request\n\tproxy._destroy = emitter.abort;\n\n\temitter.on('response', response => {\n\t\tconst {statusCode} = response;\n\n\t\tresponse.on('error', error => {\n\t\t\tproxy.emit('error', new ReadError(error, options));\n\t\t});\n\n\t\tif (options.throwHttpErrors && statusCode !== 304 && (statusCode < 200 || statusCode > 299)) {\n\t\t\tproxy.emit('error', new HTTPError(response, options), null, response);\n\t\t\treturn;\n\t\t}\n\n\t\tisFinished = true;\n\n\t\tresponse.pipe(output);\n\n\t\tfor (const destination of piped) {\n\t\t\tif (destination.headersSent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const [key, value] of Object.entries(response.headers)) {\n\t\t\t\t// Got gives *decompressed* data. Overriding `content-encoding` header would result in an error.\n\t\t\t\t// It's not possible to decompress already decompressed data, is it?\n\t\t\t\tconst allowed = options.decompress ? key !== 'content-encoding' : true;\n\t\t\t\tif (allowed) {\n\t\t\t\t\tdestination.setHeader(key, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdestination.statusCode = response.statusCode;\n\t\t}\n\n\t\tproxy.emit('response', response);\n\t});\n\n\t[\n\t\t'error',\n\t\t'request',\n\t\t'redirect',\n\t\t'uploadProgress',\n\t\t'downloadProgress'\n\t].forEach(event => emitter.on(event, (...args) => proxy.emit(event, ...args)));\n\n\tconst pipe = proxy.pipe.bind(proxy);\n\tconst unpipe = proxy.unpipe.bind(proxy);\n\tproxy.pipe = (destination, options) => {\n\t\tif (isFinished) {\n\t\t\tthrow new Error('Failed to pipe. The response has been emitted already.');\n\t\t}\n\n\t\tconst result = pipe(destination, options);\n\n\t\tif (Reflect.has(destination, 'setHeader')) {\n\t\t\tpiped.add(destination);\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tproxy.unpipe = stream => {\n\t\tpiped.delete(stream);\n\t\treturn unpipe(stream);\n\t};\n\n\treturn proxy;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}