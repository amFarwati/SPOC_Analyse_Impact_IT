import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_composeClasses as composeClasses } from '@mui/utils';
import Popper from '@mui/material/Popper';
import NoSsr from '@mui/material/NoSsr';
import { InteractionContext } from '../context/InteractionProvider';
import { generateVirtualElement, useMouseTracker, getTootipHasData } from './utils';
import { ChartsItemTooltipContent } from './ChartsItemTooltipContent';
import { ChartsAxisTooltipContent } from './ChartsAxisTooltipContent';
import { getTooltipUtilityClass } from './tooltipClasses';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['root'],
    markCell: ['markCell'],
    labelCell: ['labelCell'],
    valueCell: ['valueCell']
  };
  return composeClasses(slots, getTooltipUtilityClass, classes);
};
function ChartsTooltip(props) {
  const {
    trigger = 'axis',
    itemContent,
    axisContent
  } = props;
  const mousePosition = useMouseTracker();
  const {
    item,
    axis
  } = React.useContext(InteractionContext);
  const displayedData = trigger === 'item' ? item : axis;
  const tooltipHasData = getTootipHasData(trigger, displayedData);
  const popperOpen = mousePosition !== null && tooltipHasData;
  const classes = useUtilityClasses({
    classes: props.classes
  });
  if (trigger === 'none') {
    return null;
  }
  return /*#__PURE__*/_jsx(NoSsr, {
    children: popperOpen && /*#__PURE__*/_jsx(Popper, {
      open: popperOpen,
      placement: "right-start",
      anchorEl: generateVirtualElement(mousePosition),
      style: {
        pointerEvents: 'none'
      },
      children: trigger === 'item' ? /*#__PURE__*/_jsx(ChartsItemTooltipContent, {
        itemData: displayedData,
        content: itemContent,
        sx: {
          mx: 2
        },
        classes: classes
      }) : /*#__PURE__*/_jsx(ChartsAxisTooltipContent, {
        axisData: displayedData,
        content: axisContent,
        sx: {
          mx: 2
        },
        classes: classes
      })
    })
  });
}
process.env.NODE_ENV !== "production" ? ChartsTooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Component to override the tooltip content when triger is set to 'axis'.
   */
  axisContent: PropTypes.elementType,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * Component to override the tooltip content when triger is set to 'item'.
   */
  itemContent: PropTypes.elementType,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'item'
   */
  trigger: PropTypes.oneOf(['axis', 'item', 'none'])
} : void 0;
export { ChartsTooltip };