{"ast":null,"code":"'use strict';\n\nconst {\n  PassThrough: PassThroughStream\n} = require('stream');\nmodule.exports = options => {\n  options = {\n    ...options\n  };\n  const {\n    array\n  } = options;\n  let {\n    encoding\n  } = options;\n  const isBuffer = encoding === 'buffer';\n  let objectMode = false;\n  if (array) {\n    objectMode = !(encoding || isBuffer);\n  } else {\n    encoding = encoding || 'utf8';\n  }\n  if (isBuffer) {\n    encoding = null;\n  }\n  const stream = new PassThroughStream({\n    objectMode\n  });\n  if (encoding) {\n    stream.setEncoding(encoding);\n  }\n  let length = 0;\n  const chunks = [];\n  stream.on('data', chunk => {\n    chunks.push(chunk);\n    if (objectMode) {\n      length = chunks.length;\n    } else {\n      length += chunk.length;\n    }\n  });\n  stream.getBufferedValue = () => {\n    if (array) {\n      return chunks;\n    }\n    return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n  };\n  stream.getBufferedLength = () => length;\n  return stream;\n};","map":{"version":3,"names":["PassThrough","PassThroughStream","require","module","exports","options","array","encoding","isBuffer","objectMode","stream","setEncoding","length","chunks","on","chunk","push","getBufferedValue","Buffer","concat","join","getBufferedLength"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js"],"sourcesContent":["'use strict';\nconst {PassThrough: PassThroughStream} = require('stream');\n\nmodule.exports = options => {\n\toptions = {...options};\n\n\tconst {array} = options;\n\tlet {encoding} = options;\n\tconst isBuffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || isBuffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (isBuffer) {\n\t\tencoding = null;\n\t}\n\n\tconst stream = new PassThroughStream({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tlet length = 0;\n\tconst chunks = [];\n\n\tstream.on('data', chunk => {\n\t\tchunks.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlength = chunks.length;\n\t\t} else {\n\t\t\tlength += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn chunks;\n\t\t}\n\n\t\treturn isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n\t};\n\n\tstream.getBufferedLength = () => length;\n\n\treturn stream;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAACA,WAAW,EAAEC;AAAiB,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE1DC,MAAM,CAACC,OAAO,GAAGC,OAAO,IAAI;EAC3BA,OAAO,GAAG;IAAC,GAAGA;EAAO,CAAC;EAEtB,MAAM;IAACC;EAAK,CAAC,GAAGD,OAAO;EACvB,IAAI;IAACE;EAAQ,CAAC,GAAGF,OAAO;EACxB,MAAMG,QAAQ,GAAGD,QAAQ,KAAK,QAAQ;EACtC,IAAIE,UAAU,GAAG,KAAK;EAEtB,IAAIH,KAAK,EAAE;IACVG,UAAU,GAAG,EAAEF,QAAQ,IAAIC,QAAQ,CAAC;EACrC,CAAC,MAAM;IACND,QAAQ,GAAGA,QAAQ,IAAI,MAAM;EAC9B;EAEA,IAAIC,QAAQ,EAAE;IACbD,QAAQ,GAAG,IAAI;EAChB;EAEA,MAAMG,MAAM,GAAG,IAAIT,iBAAiB,CAAC;IAACQ;EAAU,CAAC,CAAC;EAElD,IAAIF,QAAQ,EAAE;IACbG,MAAM,CAACC,WAAW,CAACJ,QAAQ,CAAC;EAC7B;EAEA,IAAIK,MAAM,GAAG,CAAC;EACd,MAAMC,MAAM,GAAG,EAAE;EAEjBH,MAAM,CAACI,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;IAC1BF,MAAM,CAACG,IAAI,CAACD,KAAK,CAAC;IAElB,IAAIN,UAAU,EAAE;MACfG,MAAM,GAAGC,MAAM,CAACD,MAAM;IACvB,CAAC,MAAM;MACNA,MAAM,IAAIG,KAAK,CAACH,MAAM;IACvB;EACD,CAAC,CAAC;EAEFF,MAAM,CAACO,gBAAgB,GAAG,MAAM;IAC/B,IAAIX,KAAK,EAAE;MACV,OAAOO,MAAM;IACd;IAEA,OAAOL,QAAQ,GAAGU,MAAM,CAACC,MAAM,CAACN,MAAM,EAAED,MAAM,CAAC,GAAGC,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC;EAClE,CAAC;EAEDV,MAAM,CAACW,iBAAiB,GAAG,MAAMT,MAAM;EAEvC,OAAOF,MAAM;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}