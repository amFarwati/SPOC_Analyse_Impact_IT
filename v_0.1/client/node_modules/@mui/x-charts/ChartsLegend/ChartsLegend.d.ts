import * as React from 'react';
import { Theme } from '@mui/material/styles';
import { DrawingArea } from '../context/DrawingProvider';
import { AnchorPosition, SizingParams } from './utils';
import { FormattedSeries } from '../context/SeriesContextProvider';
import { ChartsLegendClasses } from './chartsLegendClasses';
import { DefaultizedProps } from '../models/helpers';
import { ChartSeriesDefaultized, LegendParams } from '../models/seriesType/config';
export interface ChartsLegendSlotsComponent {
    legend?: React.JSXElementConstructor<LegendRendererProps>;
}
export interface ChartsLegendSlotComponentProps {
    legend?: Partial<LegendRendererProps>;
}
export type ChartsLegendProps = {
    position?: AnchorPosition;
    offset?: Partial<{
        x: number;
        y: number;
    }>;
    /**
     * Override or extend the styles applied to the component.
     */
    classes?: Partial<ChartsLegendClasses>;
    /**
     * Set to true to hide the legend.
     */
    hidden?: boolean;
    /**
     * Overridable component slots.
     * @default {}
     */
    slots?: ChartsLegendSlotsComponent;
    /**
     * The props used for each component slot.
     * @default {}
     */
    slotProps?: ChartsLegendSlotComponentProps;
} & SizingParams;
type DefaultizedChartsLegendProps = DefaultizedProps<ChartsLegendProps, 'direction' | 'position'>;
type SeriesLegendOwnerState = ChartSeriesDefaultized<any> & Pick<DefaultizedChartsLegendProps, 'direction'> & {
    seriesIndex: number;
};
export type ChartsLegendRootOwnerState = {
    position: AnchorPosition;
    direction: 'row' | 'column';
    drawingArea: DrawingArea;
    offsetX?: number;
    offsetY?: number;
    seriesNumber: number;
};
export declare const ChartsLegendRoot: import("@emotion/styled").StyledComponent<import("@mui/system").MUIStyledCommonProps<Theme> & {
    ownerState: ChartsLegendRootOwnerState;
}, Pick<React.SVGProps<SVGGElement>, keyof React.SVGProps<SVGGElement>>, {}>;
export declare const ChartsSeriesLegendGroup: import("@emotion/styled").StyledComponent<import("@mui/system").MUIStyledCommonProps<Theme> & {
    ownerState: SeriesLegendOwnerState;
}, Pick<React.SVGProps<SVGGElement>, keyof React.SVGProps<SVGGElement>>, {}>;
export declare const ChartsLegendMark: import("@emotion/styled").StyledComponent<import("@mui/system").MUIStyledCommonProps<Theme> & {
    ownerState: {
        color: string;
    };
}, Pick<React.SVGProps<SVGRectElement>, keyof React.SVGProps<SVGRectElement>>, {}>;
export declare const ChartsLegendLabel: import("@emotion/styled").StyledComponent<import("@mui/system").MUIStyledCommonProps<Theme>, Pick<React.SVGTextElementAttributes<SVGTextElement>, keyof React.SVGTextElementAttributes<SVGTextElement>>, {}>;
export interface LegendRendererProps extends Omit<DefaultizedChartsLegendProps, 'slots' | 'slotProps'> {
    series: FormattedSeries;
    seriesToDisplay: LegendParams[];
    drawingArea: DrawingArea;
    classes: Record<'label' | 'mark' | 'series' | 'root', string>;
}
export declare function ChartsLegend(inProps: ChartsLegendProps): React.JSX.Element;
export {};
