"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartsTooltip = ChartsTooltip;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _Popper = _interopRequireDefault(require("@mui/material/Popper"));
var _NoSsr = _interopRequireDefault(require("@mui/material/NoSsr"));
var _InteractionProvider = require("../context/InteractionProvider");
var _utils2 = require("./utils");
var _ChartsItemTooltipContent = require("./ChartsItemTooltipContent");
var _ChartsAxisTooltipContent = require("./ChartsAxisTooltipContent");
var _tooltipClasses = require("./tooltipClasses");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['root'],
    markCell: ['markCell'],
    labelCell: ['labelCell'],
    valueCell: ['valueCell']
  };
  return (0, _utils.unstable_composeClasses)(slots, _tooltipClasses.getTooltipUtilityClass, classes);
};
function ChartsTooltip(props) {
  const {
    trigger = 'axis',
    itemContent,
    axisContent
  } = props;
  const mousePosition = (0, _utils2.useMouseTracker)();
  const {
    item,
    axis
  } = React.useContext(_InteractionProvider.InteractionContext);
  const displayedData = trigger === 'item' ? item : axis;
  const tooltipHasData = (0, _utils2.getTootipHasData)(trigger, displayedData);
  const popperOpen = mousePosition !== null && tooltipHasData;
  const classes = useUtilityClasses({
    classes: props.classes
  });
  if (trigger === 'none') {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_NoSsr.default, {
    children: popperOpen && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Popper.default, {
      open: popperOpen,
      placement: "right-start",
      anchorEl: (0, _utils2.generateVirtualElement)(mousePosition),
      style: {
        pointerEvents: 'none'
      },
      children: trigger === 'item' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsItemTooltipContent.ChartsItemTooltipContent, {
        itemData: displayedData,
        content: itemContent,
        sx: {
          mx: 2
        },
        classes: classes
      }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsAxisTooltipContent.ChartsAxisTooltipContent, {
        axisData: displayedData,
        content: axisContent,
        sx: {
          mx: 2
        },
        classes: classes
      })
    })
  });
}
process.env.NODE_ENV !== "production" ? ChartsTooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Component to override the tooltip content when triger is set to 'axis'.
   */
  axisContent: _propTypes.default.elementType,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * Component to override the tooltip content when triger is set to 'item'.
   */
  itemContent: _propTypes.default.elementType,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'item'
   */
  trigger: _propTypes.default.oneOf(['axis', 'item', 'none'])
} : void 0;