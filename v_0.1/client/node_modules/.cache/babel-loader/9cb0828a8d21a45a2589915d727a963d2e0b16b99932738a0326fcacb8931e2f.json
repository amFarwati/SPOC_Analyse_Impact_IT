{"ast":null,"code":"'use strict';\n\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([200, 203, 204, 206, 300, 301, 308, 404, 405, 410, 414, 501]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501]);\nconst errorStatusCodes = new Set([500, 502, 503, 504]);\nconst hopByHopHeaders = {\n  date: true,\n  // included, because we add Age update Date\n  connection: true,\n  'keep-alive': true,\n  'proxy-authenticate': true,\n  'proxy-authorization': true,\n  te: true,\n  trailer: true,\n  'transfer-encoding': true,\n  upgrade: true\n};\nconst excludedFromRevalidationUpdate = {\n  // Since the old body is reused, it doesn't make sense to change properties of the body\n  'content-length': true,\n  'content-encoding': true,\n  'transfer-encoding': true,\n  'content-range': true\n};\nfunction toNumberOrZero(s) {\n  const n = parseInt(s, 10);\n  return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n  // consider undefined response as faulty\n  if (!response) {\n    return true;\n  }\n  return errorStatusCodes.has(response.status);\n}\nfunction parseCacheControl(header) {\n  const cc = {};\n  if (!header) return cc;\n\n  // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n  // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n  const parts = header.trim().split(/,/);\n  for (const part of parts) {\n    const [k, v] = part.split(/=/, 2);\n    cc[k.trim()] = v === undefined ? true : v.trim().replace(/^\"|\"$/g, '');\n  }\n  return cc;\n}\nfunction formatCacheControl(cc) {\n  let parts = [];\n  for (const k in cc) {\n    const v = cc[k];\n    parts.push(v === true ? k : k + '=' + v);\n  }\n  if (!parts.length) {\n    return undefined;\n  }\n  return parts.join(', ');\n}\nmodule.exports = class CachePolicy {\n  constructor(req, res, {\n    shared,\n    cacheHeuristic,\n    immutableMinTimeToLive,\n    ignoreCargoCult,\n    _fromObject\n  } = {}) {\n    if (_fromObject) {\n      this._fromObject(_fromObject);\n      return;\n    }\n    if (!res || !res.headers) {\n      throw Error('Response headers missing');\n    }\n    this._assertRequestHasHeaders(req);\n    this._responseTime = this.now();\n    this._isShared = shared !== false;\n    this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n    this._immutableMinTtl = undefined !== immutableMinTimeToLive ? immutableMinTimeToLive : 24 * 3600 * 1000;\n    this._status = 'status' in res ? res.status : 200;\n    this._resHeaders = res.headers;\n    this._rescc = parseCacheControl(res.headers['cache-control']);\n    this._method = 'method' in req ? req.method : 'GET';\n    this._url = req.url;\n    this._host = req.headers.host;\n    this._noAuthorization = !req.headers.authorization;\n    this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n    this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n    // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n    // so there's no point stricly adhering to the blindly copy&pasted directives.\n    if (ignoreCargoCult && 'pre-check' in this._rescc && 'post-check' in this._rescc) {\n      delete this._rescc['pre-check'];\n      delete this._rescc['post-check'];\n      delete this._rescc['no-cache'];\n      delete this._rescc['no-store'];\n      delete this._rescc['must-revalidate'];\n      this._resHeaders = Object.assign({}, this._resHeaders, {\n        'cache-control': formatCacheControl(this._rescc)\n      });\n      delete this._resHeaders.expires;\n      delete this._resHeaders.pragma;\n    }\n\n    // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n    // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n    if (res.headers['cache-control'] == null && /no-cache/.test(res.headers.pragma)) {\n      this._rescc['no-cache'] = true;\n    }\n  }\n  now() {\n    return Date.now();\n  }\n  storable() {\n    // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n    return !!(!this._reqcc['no-store'] && (\n    // A cache MUST NOT store a response to any request, unless:\n    // The request method is understood by the cache and defined as being cacheable, and\n    'GET' === this._method || 'HEAD' === this._method || 'POST' === this._method && this._hasExplicitExpiration()) &&\n    // the response status code is understood by the cache, and\n    understoodStatuses.has(this._status) &&\n    // the \"no-store\" cache directive does not appear in request or response header fields, and\n    !this._rescc['no-store'] && (\n    // the \"private\" response directive does not appear in the response, if the cache is shared, and\n    !this._isShared || !this._rescc.private) && (\n    // the Authorization header field does not appear in the request, if the cache is shared,\n    !this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && (\n    // the response either:\n    // contains an Expires header field, or\n    this._resHeaders.expires ||\n    // contains a max-age response directive, or\n    // contains a s-maxage response directive and the cache is shared, or\n    // contains a public response directive.\n    this._rescc['max-age'] || this._isShared && this._rescc['s-maxage'] || this._rescc.public ||\n    // has a status code that is defined as cacheable by default\n    statusCodeCacheableByDefault.has(this._status)));\n  }\n  _hasExplicitExpiration() {\n    // 4.2.1 Calculating Freshness Lifetime\n    return this._isShared && this._rescc['s-maxage'] || this._rescc['max-age'] || this._resHeaders.expires;\n  }\n  _assertRequestHasHeaders(req) {\n    if (!req || !req.headers) {\n      throw Error('Request headers missing');\n    }\n  }\n  satisfiesWithoutRevalidation(req) {\n    this._assertRequestHasHeaders(req);\n\n    // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n    // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n    // unless the stored response is successfully validated (Section 4.3), and\n    const requestCC = parseCacheControl(req.headers['cache-control']);\n    if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n      return false;\n    }\n    if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n      return false;\n    }\n    if (requestCC['min-fresh'] && this.timeToLive() < 1000 * requestCC['min-fresh']) {\n      return false;\n    }\n\n    // the stored response is either:\n    // fresh, or allowed to be served stale\n    if (this.stale()) {\n      const allowsStale = requestCC['max-stale'] && !this._rescc['must-revalidate'] && (true === requestCC['max-stale'] || requestCC['max-stale'] > this.age() - this.maxAge());\n      if (!allowsStale) {\n        return false;\n      }\n    }\n    return this._requestMatches(req, false);\n  }\n  _requestMatches(req, allowHeadMethod) {\n    // The presented effective request URI and that of the stored response match, and\n    return (!this._url || this._url === req.url) && this._host === req.headers.host && (\n    // the request method associated with the stored response allows it to be used for the presented request, and\n    !req.method || this._method === req.method || allowHeadMethod && 'HEAD' === req.method) &&\n    // selecting header fields nominated by the stored response (if any) match those presented, and\n    this._varyMatches(req);\n  }\n  _allowsStoringAuthenticated() {\n    //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n    return this._rescc['must-revalidate'] || this._rescc.public || this._rescc['s-maxage'];\n  }\n  _varyMatches(req) {\n    if (!this._resHeaders.vary) {\n      return true;\n    }\n\n    // A Vary header field-value of \"*\" always fails to match\n    if (this._resHeaders.vary === '*') {\n      return false;\n    }\n    const fields = this._resHeaders.vary.trim().toLowerCase().split(/\\s*,\\s*/);\n    for (const name of fields) {\n      if (req.headers[name] !== this._reqHeaders[name]) return false;\n    }\n    return true;\n  }\n  _copyWithoutHopByHopHeaders(inHeaders) {\n    const headers = {};\n    for (const name in inHeaders) {\n      if (hopByHopHeaders[name]) continue;\n      headers[name] = inHeaders[name];\n    }\n    // 9.1.  Connection\n    if (inHeaders.connection) {\n      const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n      for (const name of tokens) {\n        delete headers[name];\n      }\n    }\n    if (headers.warning) {\n      const warnings = headers.warning.split(/,/).filter(warning => {\n        return !/^\\s*1[0-9][0-9]/.test(warning);\n      });\n      if (!warnings.length) {\n        delete headers.warning;\n      } else {\n        headers.warning = warnings.join(',').trim();\n      }\n    }\n    return headers;\n  }\n  responseHeaders() {\n    const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n    const age = this.age();\n\n    // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n    // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n    if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {\n      headers.warning = (headers.warning ? `${headers.warning}, ` : '') + '113 - \"rfc7234 5.5.4\"';\n    }\n    headers.age = `${Math.round(age)}`;\n    headers.date = new Date(this.now()).toUTCString();\n    return headers;\n  }\n\n  /**\n   * Value of the Date response header or current time if Date was invalid\n   * @return timestamp\n   */\n  date() {\n    const serverDate = Date.parse(this._resHeaders.date);\n    if (isFinite(serverDate)) {\n      return serverDate;\n    }\n    return this._responseTime;\n  }\n\n  /**\n   * Value of the Age header, in seconds, updated for the current time.\n   * May be fractional.\n   *\n   * @return Number\n   */\n  age() {\n    let age = this._ageValue();\n    const residentTime = (this.now() - this._responseTime) / 1000;\n    return age + residentTime;\n  }\n  _ageValue() {\n    return toNumberOrZero(this._resHeaders.age);\n  }\n\n  /**\n   * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n   *\n   * For an up-to-date value, see `timeToLive()`.\n   *\n   * @return Number\n   */\n  maxAge() {\n    if (!this.storable() || this._rescc['no-cache']) {\n      return 0;\n    }\n\n    // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n    // so this implementation requires explicit opt-in via public header\n    if (this._isShared && this._resHeaders['set-cookie'] && !this._rescc.public && !this._rescc.immutable) {\n      return 0;\n    }\n    if (this._resHeaders.vary === '*') {\n      return 0;\n    }\n    if (this._isShared) {\n      if (this._rescc['proxy-revalidate']) {\n        return 0;\n      }\n      // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n      if (this._rescc['s-maxage']) {\n        return toNumberOrZero(this._rescc['s-maxage']);\n      }\n    }\n\n    // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n    if (this._rescc['max-age']) {\n      return toNumberOrZero(this._rescc['max-age']);\n    }\n    const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n    const serverDate = this.date();\n    if (this._resHeaders.expires) {\n      const expires = Date.parse(this._resHeaders.expires);\n      // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n      if (Number.isNaN(expires) || expires < serverDate) {\n        return 0;\n      }\n      return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n    }\n    if (this._resHeaders['last-modified']) {\n      const lastModified = Date.parse(this._resHeaders['last-modified']);\n      if (isFinite(lastModified) && serverDate > lastModified) {\n        return Math.max(defaultMinTtl, (serverDate - lastModified) / 1000 * this._cacheHeuristic);\n      }\n    }\n    return defaultMinTtl;\n  }\n  timeToLive() {\n    const age = this.maxAge() - this.age();\n    const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n    const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n    return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n  }\n  stale() {\n    return this.maxAge() <= this.age();\n  }\n  _useStaleIfError() {\n    return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n  }\n  useStaleWhileRevalidate() {\n    return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n  }\n  static fromObject(obj) {\n    return new this(undefined, undefined, {\n      _fromObject: obj\n    });\n  }\n  _fromObject(obj) {\n    if (this._responseTime) throw Error('Reinitialized');\n    if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n    this._responseTime = obj.t;\n    this._isShared = obj.sh;\n    this._cacheHeuristic = obj.ch;\n    this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n    this._status = obj.st;\n    this._resHeaders = obj.resh;\n    this._rescc = obj.rescc;\n    this._method = obj.m;\n    this._url = obj.u;\n    this._host = obj.h;\n    this._noAuthorization = obj.a;\n    this._reqHeaders = obj.reqh;\n    this._reqcc = obj.reqcc;\n  }\n  toObject() {\n    return {\n      v: 1,\n      t: this._responseTime,\n      sh: this._isShared,\n      ch: this._cacheHeuristic,\n      imm: this._immutableMinTtl,\n      st: this._status,\n      resh: this._resHeaders,\n      rescc: this._rescc,\n      m: this._method,\n      u: this._url,\n      h: this._host,\n      a: this._noAuthorization,\n      reqh: this._reqHeaders,\n      reqcc: this._reqcc\n    };\n  }\n\n  /**\n   * Headers for sending to the origin server to revalidate stale response.\n   * Allows server to return 304 to allow reuse of the previous response.\n   *\n   * Hop by hop headers are always stripped.\n   * Revalidation headers may be added or removed, depending on request.\n   */\n  revalidationHeaders(incomingReq) {\n    this._assertRequestHasHeaders(incomingReq);\n    const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n    // This implementation does not understand range requests\n    delete headers['if-range'];\n    if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n      // revalidation allowed via HEAD\n      // not for the same resource, or wasn't allowed to be cached anyway\n      delete headers['if-none-match'];\n      delete headers['if-modified-since'];\n      return headers;\n    }\n\n    /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n    if (this._resHeaders.etag) {\n      headers['if-none-match'] = headers['if-none-match'] ? `${headers['if-none-match']}, ${this._resHeaders.etag}` : this._resHeaders.etag;\n    }\n\n    // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n    const forbidsWeakValidators = headers['accept-ranges'] || headers['if-match'] || headers['if-unmodified-since'] || this._method && this._method != 'GET';\n\n    /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n    Note: This implementation does not understand partial responses (206) */\n    if (forbidsWeakValidators) {\n      delete headers['if-modified-since'];\n      if (headers['if-none-match']) {\n        const etags = headers['if-none-match'].split(/,/).filter(etag => {\n          return !/^\\s*W\\//.test(etag);\n        });\n        if (!etags.length) {\n          delete headers['if-none-match'];\n        } else {\n          headers['if-none-match'] = etags.join(',').trim();\n        }\n      }\n    } else if (this._resHeaders['last-modified'] && !headers['if-modified-since']) {\n      headers['if-modified-since'] = this._resHeaders['last-modified'];\n    }\n    return headers;\n  }\n\n  /**\n   * Creates new CachePolicy with information combined from the previews response,\n   * and the new revalidation response.\n   *\n   * Returns {policy, modified} where modified is a boolean indicating\n   * whether the response body has been modified, and old cached body can't be used.\n   *\n   * @return {Object} {policy: CachePolicy, modified: Boolean}\n   */\n  revalidatedPolicy(request, response) {\n    this._assertRequestHasHeaders(request);\n    if (this._useStaleIfError() && isErrorResponse(response)) {\n      // I consider the revalidation request unsuccessful\n      return {\n        modified: false,\n        matches: false,\n        policy: this\n      };\n    }\n    if (!response || !response.headers) {\n      throw Error('Response headers missing');\n    }\n\n    // These aren't going to be supported exactly, since one CachePolicy object\n    // doesn't know about all the other cached objects.\n    let matches = false;\n    if (response.status !== undefined && response.status != 304) {\n      matches = false;\n    } else if (response.headers.etag && !/^\\s*W\\//.test(response.headers.etag)) {\n      // \"All of the stored responses with the same strong validator are selected.\n      // If none of the stored responses contain the same strong validator,\n      // then the cache MUST NOT use the new response to update any stored responses.\"\n      matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag;\n    } else if (this._resHeaders.etag && response.headers.etag) {\n      // \"If the new response contains a weak validator and that validator corresponds\n      // to one of the cache's stored responses,\n      // then the most recent of those matching stored responses is selected for update.\"\n      matches = this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag.replace(/^\\s*W\\//, '');\n    } else if (this._resHeaders['last-modified']) {\n      matches = this._resHeaders['last-modified'] === response.headers['last-modified'];\n    } else {\n      // If the new response does not include any form of validator (such as in the case where\n      // a client generates an If-Modified-Since request from a source other than the Last-Modified\n      // response header field), and there is only one stored response, and that stored response also\n      // lacks a validator, then that stored response is selected for update.\n      if (!this._resHeaders.etag && !this._resHeaders['last-modified'] && !response.headers.etag && !response.headers['last-modified']) {\n        matches = true;\n      }\n    }\n    if (!matches) {\n      return {\n        policy: new this.constructor(request, response),\n        // Client receiving 304 without body, even if it's invalid/mismatched has no option\n        // but to reuse a cached body. We don't have a good way to tell clients to do\n        // error recovery in such case.\n        modified: response.status != 304,\n        matches: false\n      };\n    }\n\n    // use other header fields provided in the 304 (Not Modified) response to replace all instances\n    // of the corresponding header fields in the stored response.\n    const headers = {};\n    for (const k in this._resHeaders) {\n      headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];\n    }\n    const newResponse = Object.assign({}, response, {\n      status: this._status,\n      method: this._method,\n      headers\n    });\n    return {\n      policy: new this.constructor(request, newResponse, {\n        shared: this._isShared,\n        cacheHeuristic: this._cacheHeuristic,\n        immutableMinTimeToLive: this._immutableMinTtl\n      }),\n      modified: false,\n      matches: true\n    };\n  }\n};","map":{"version":3,"names":["statusCodeCacheableByDefault","Set","understoodStatuses","errorStatusCodes","hopByHopHeaders","date","connection","te","trailer","upgrade","excludedFromRevalidationUpdate","toNumberOrZero","s","n","parseInt","isFinite","isErrorResponse","response","has","status","parseCacheControl","header","cc","parts","trim","split","part","k","v","undefined","replace","formatCacheControl","push","length","join","module","exports","CachePolicy","constructor","req","res","shared","cacheHeuristic","immutableMinTimeToLive","ignoreCargoCult","_fromObject","headers","Error","_assertRequestHasHeaders","_responseTime","now","_isShared","_cacheHeuristic","_immutableMinTtl","_status","_resHeaders","_rescc","_method","method","_url","url","_host","host","_noAuthorization","authorization","_reqHeaders","vary","_reqcc","Object","assign","expires","pragma","test","Date","storable","_hasExplicitExpiration","private","_allowsStoringAuthenticated","public","satisfiesWithoutRevalidation","requestCC","age","timeToLive","stale","allowsStale","maxAge","_requestMatches","allowHeadMethod","_varyMatches","fields","toLowerCase","name","_copyWithoutHopByHopHeaders","inHeaders","tokens","warning","warnings","filter","responseHeaders","Math","round","toUTCString","serverDate","parse","_ageValue","residentTime","immutable","defaultMinTtl","Number","isNaN","max","lastModified","staleIfErrorAge","staleWhileRevalidateAge","_useStaleIfError","useStaleWhileRevalidate","fromObject","obj","t","sh","ch","imm","st","resh","rescc","m","u","h","a","reqh","reqcc","toObject","revalidationHeaders","incomingReq","etag","forbidsWeakValidators","etags","revalidatedPolicy","request","modified","matches","policy","newResponse"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/http-cache-semantics/index.js"],"sourcesContent":["'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503, \n    504,\n]);\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\n\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if(!response) {\n        return true\n    }\n    return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/,/);\n    for (const part of parts) {\n        const [k, v] = part.split(/=/, 2);\n        cc[k.trim()] = v === undefined ? true : v.trim().replace(/^\"|\"$/g, '');\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.has(this._status) &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc['max-age'] ||\n                (this._isShared && this._rescc['s-maxage']) ||\n                this._rescc.public ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.has(this._status))\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */\n    date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = this._ageValue();\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return toNumberOrZero(this._rescc['s-maxage']);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return toNumberOrZero(this._rescc['max-age']);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((serverDate - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n    }\n\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if(this._useStaleIfError() && isErrorResponse(response)) {  // I consider the revalidation request unsuccessful\n          return {\n            modified: false,\n            matches: false,\n            policy: this,\n          };\n        }\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA,MAAMA,4BAA4B,GAAG,IAAIC,GAAG,CAAC,CACzC,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAC;;AAEF;AACA,MAAMC,kBAAkB,GAAG,IAAID,GAAG,CAAC,CAC/B,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAC;AAEF,MAAME,gBAAgB,GAAG,IAAIF,GAAG,CAAC,CAC7B,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAC;AAEF,MAAMG,eAAe,GAAG;EACpBC,IAAI,EAAE,IAAI;EAAE;EACZC,UAAU,EAAE,IAAI;EAChB,YAAY,EAAE,IAAI;EAClB,oBAAoB,EAAE,IAAI;EAC1B,qBAAqB,EAAE,IAAI;EAC3BC,EAAE,EAAE,IAAI;EACRC,OAAO,EAAE,IAAI;EACb,mBAAmB,EAAE,IAAI;EACzBC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,8BAA8B,GAAG;EACnC;EACA,gBAAgB,EAAE,IAAI;EACtB,kBAAkB,EAAE,IAAI;EACxB,mBAAmB,EAAE,IAAI;EACzB,eAAe,EAAE;AACrB,CAAC;AAED,SAASC,cAAcA,CAACC,CAAC,EAAE;EACvB,MAAMC,CAAC,GAAGC,QAAQ,CAACF,CAAC,EAAE,EAAE,CAAC;EACzB,OAAOG,QAAQ,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;AAC9B;;AAEA;AACA,SAASG,eAAeA,CAACC,QAAQ,EAAE;EAC/B;EACA,IAAG,CAACA,QAAQ,EAAE;IACV,OAAO,IAAI;EACf;EACA,OAAOd,gBAAgB,CAACe,GAAG,CAACD,QAAQ,CAACE,MAAM,CAAC;AAChD;AAEA,SAASC,iBAAiBA,CAACC,MAAM,EAAE;EAC/B,MAAMC,EAAE,GAAG,CAAC,CAAC;EACb,IAAI,CAACD,MAAM,EAAE,OAAOC,EAAE;;EAEtB;EACA;EACA,MAAMC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;EACtC,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAGF,IAAI,CAACD,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACjCH,EAAE,CAACK,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC,GAAGI,CAAC,KAAKC,SAAS,GAAG,IAAI,GAAGD,CAAC,CAACJ,IAAI,CAAC,CAAC,CAACM,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC1E;EAEA,OAAOR,EAAE;AACb;AAEA,SAASS,kBAAkBA,CAACT,EAAE,EAAE;EAC5B,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,MAAMI,CAAC,IAAIL,EAAE,EAAE;IAChB,MAAMM,CAAC,GAAGN,EAAE,CAACK,CAAC,CAAC;IACfJ,KAAK,CAACS,IAAI,CAACJ,CAAC,KAAK,IAAI,GAAGD,CAAC,GAAGA,CAAC,GAAG,GAAG,GAAGC,CAAC,CAAC;EAC5C;EACA,IAAI,CAACL,KAAK,CAACU,MAAM,EAAE;IACf,OAAOJ,SAAS;EACpB;EACA,OAAON,KAAK,CAACW,IAAI,CAAC,IAAI,CAAC;AAC3B;AAEAC,MAAM,CAACC,OAAO,GAAG,MAAMC,WAAW,CAAC;EAC/BC,WAAWA,CACPC,GAAG,EACHC,GAAG,EACH;IACIC,MAAM;IACNC,cAAc;IACdC,sBAAsB;IACtBC,eAAe;IACfC;EACJ,CAAC,GAAG,CAAC,CAAC,EACR;IACE,IAAIA,WAAW,EAAE;MACb,IAAI,CAACA,WAAW,CAACA,WAAW,CAAC;MAC7B;IACJ;IAEA,IAAI,CAACL,GAAG,IAAI,CAACA,GAAG,CAACM,OAAO,EAAE;MACtB,MAAMC,KAAK,CAAC,0BAA0B,CAAC;IAC3C;IACA,IAAI,CAACC,wBAAwB,CAACT,GAAG,CAAC;IAElC,IAAI,CAACU,aAAa,GAAG,IAAI,CAACC,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACC,SAAS,GAAGV,MAAM,KAAK,KAAK;IACjC,IAAI,CAACW,eAAe,GAChBvB,SAAS,KAAKa,cAAc,GAAGA,cAAc,GAAG,GAAG,CAAC,CAAC;IACzD,IAAI,CAACW,gBAAgB,GACjBxB,SAAS,KAAKc,sBAAsB,GAC9BA,sBAAsB,GACtB,EAAE,GAAG,IAAI,GAAG,IAAI;IAE1B,IAAI,CAACW,OAAO,GAAG,QAAQ,IAAId,GAAG,GAAGA,GAAG,CAACrB,MAAM,GAAG,GAAG;IACjD,IAAI,CAACoC,WAAW,GAAGf,GAAG,CAACM,OAAO;IAC9B,IAAI,CAACU,MAAM,GAAGpC,iBAAiB,CAACoB,GAAG,CAACM,OAAO,CAAC,eAAe,CAAC,CAAC;IAC7D,IAAI,CAACW,OAAO,GAAG,QAAQ,IAAIlB,GAAG,GAAGA,GAAG,CAACmB,MAAM,GAAG,KAAK;IACnD,IAAI,CAACC,IAAI,GAAGpB,GAAG,CAACqB,GAAG;IACnB,IAAI,CAACC,KAAK,GAAGtB,GAAG,CAACO,OAAO,CAACgB,IAAI;IAC7B,IAAI,CAACC,gBAAgB,GAAG,CAACxB,GAAG,CAACO,OAAO,CAACkB,aAAa;IAClD,IAAI,CAACC,WAAW,GAAGzB,GAAG,CAACM,OAAO,CAACoB,IAAI,GAAG3B,GAAG,CAACO,OAAO,GAAG,IAAI,CAAC,CAAC;IAC1D,IAAI,CAACqB,MAAM,GAAG/C,iBAAiB,CAACmB,GAAG,CAACO,OAAO,CAAC,eAAe,CAAC,CAAC;;IAE7D;IACA;IACA,IACIF,eAAe,IACf,WAAW,IAAI,IAAI,CAACY,MAAM,IAC1B,YAAY,IAAI,IAAI,CAACA,MAAM,EAC7B;MACE,OAAO,IAAI,CAACA,MAAM,CAAC,WAAW,CAAC;MAC/B,OAAO,IAAI,CAACA,MAAM,CAAC,YAAY,CAAC;MAChC,OAAO,IAAI,CAACA,MAAM,CAAC,UAAU,CAAC;MAC9B,OAAO,IAAI,CAACA,MAAM,CAAC,UAAU,CAAC;MAC9B,OAAO,IAAI,CAACA,MAAM,CAAC,iBAAiB,CAAC;MACrC,IAAI,CAACD,WAAW,GAAGa,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACd,WAAW,EAAE;QACnD,eAAe,EAAExB,kBAAkB,CAAC,IAAI,CAACyB,MAAM;MACnD,CAAC,CAAC;MACF,OAAO,IAAI,CAACD,WAAW,CAACe,OAAO;MAC/B,OAAO,IAAI,CAACf,WAAW,CAACgB,MAAM;IAClC;;IAEA;IACA;IACA,IACI/B,GAAG,CAACM,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,IACpC,UAAU,CAAC0B,IAAI,CAAChC,GAAG,CAACM,OAAO,CAACyB,MAAM,CAAC,EACrC;MACE,IAAI,CAACf,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI;IAClC;EACJ;EAEAN,GAAGA,CAAA,EAAG;IACF,OAAOuB,IAAI,CAACvB,GAAG,CAAC,CAAC;EACrB;EAEAwB,QAAQA,CAAA,EAAG;IACP;IACA,OAAO,CAAC,EACJ,CAAC,IAAI,CAACP,MAAM,CAAC,UAAU,CAAC;IACxB;IACA;IACC,KAAK,KAAK,IAAI,CAACV,OAAO,IACnB,MAAM,KAAK,IAAI,CAACA,OAAO,IACtB,MAAM,KAAK,IAAI,CAACA,OAAO,IAAI,IAAI,CAACkB,sBAAsB,CAAC,CAAE,CAAC;IAC/D;IACAzE,kBAAkB,CAACgB,GAAG,CAAC,IAAI,CAACoC,OAAO,CAAC;IACpC;IACA,CAAC,IAAI,CAACE,MAAM,CAAC,UAAU,CAAC;IACxB;IACC,CAAC,IAAI,CAACL,SAAS,IAAI,CAAC,IAAI,CAACK,MAAM,CAACoB,OAAO,CAAC;IACzC;IACC,CAAC,IAAI,CAACzB,SAAS,IACZ,IAAI,CAACY,gBAAgB,IACrB,IAAI,CAACc,2BAA2B,CAAC,CAAC,CAAC;IACvC;IACA;IACC,IAAI,CAACtB,WAAW,CAACe,OAAO;IACrB;IACA;IACA;IACA,IAAI,CAACd,MAAM,CAAC,SAAS,CAAC,IACrB,IAAI,CAACL,SAAS,IAAI,IAAI,CAACK,MAAM,CAAC,UAAU,CAAE,IAC3C,IAAI,CAACA,MAAM,CAACsB,MAAM;IAClB;IACA9E,4BAA4B,CAACkB,GAAG,CAAC,IAAI,CAACoC,OAAO,CAAC,CAAC,CACtD;EACL;EAEAqB,sBAAsBA,CAAA,EAAG;IACrB;IACA,OACK,IAAI,CAACxB,SAAS,IAAI,IAAI,CAACK,MAAM,CAAC,UAAU,CAAC,IAC1C,IAAI,CAACA,MAAM,CAAC,SAAS,CAAC,IACtB,IAAI,CAACD,WAAW,CAACe,OAAO;EAEhC;EAEAtB,wBAAwBA,CAACT,GAAG,EAAE;IAC1B,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACO,OAAO,EAAE;MACtB,MAAMC,KAAK,CAAC,yBAAyB,CAAC;IAC1C;EACJ;EAEAgC,4BAA4BA,CAACxC,GAAG,EAAE;IAC9B,IAAI,CAACS,wBAAwB,CAACT,GAAG,CAAC;;IAElC;IACA;IACA;IACA,MAAMyC,SAAS,GAAG5D,iBAAiB,CAACmB,GAAG,CAACO,OAAO,CAAC,eAAe,CAAC,CAAC;IACjE,IAAIkC,SAAS,CAAC,UAAU,CAAC,IAAI,UAAU,CAACR,IAAI,CAACjC,GAAG,CAACO,OAAO,CAACyB,MAAM,CAAC,EAAE;MAC9D,OAAO,KAAK;IAChB;IAEA,IAAIS,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,SAAS,CAAC,SAAS,CAAC,EAAE;MAC3D,OAAO,KAAK;IAChB;IAEA,IACIA,SAAS,CAAC,WAAW,CAAC,IACtB,IAAI,CAACE,UAAU,CAAC,CAAC,GAAG,IAAI,GAAGF,SAAS,CAAC,WAAW,CAAC,EACnD;MACE,OAAO,KAAK;IAChB;;IAEA;IACA;IACA,IAAI,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE;MACd,MAAMC,WAAW,GACbJ,SAAS,CAAC,WAAW,CAAC,IACtB,CAAC,IAAI,CAACxB,MAAM,CAAC,iBAAiB,CAAC,KAC9B,IAAI,KAAKwB,SAAS,CAAC,WAAW,CAAC,IAC5BA,SAAS,CAAC,WAAW,CAAC,GAAG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC;MAC5D,IAAI,CAACD,WAAW,EAAE;QACd,OAAO,KAAK;MAChB;IACJ;IAEA,OAAO,IAAI,CAACE,eAAe,CAAC/C,GAAG,EAAE,KAAK,CAAC;EAC3C;EAEA+C,eAAeA,CAAC/C,GAAG,EAAEgD,eAAe,EAAE;IAClC;IACA,OACI,CAAC,CAAC,IAAI,CAAC5B,IAAI,IAAI,IAAI,CAACA,IAAI,KAAKpB,GAAG,CAACqB,GAAG,KACpC,IAAI,CAACC,KAAK,KAAKtB,GAAG,CAACO,OAAO,CAACgB,IAAI;IAC/B;IACC,CAACvB,GAAG,CAACmB,MAAM,IACR,IAAI,CAACD,OAAO,KAAKlB,GAAG,CAACmB,MAAM,IAC1B6B,eAAe,IAAI,MAAM,KAAKhD,GAAG,CAACmB,MAAO,CAAC;IAC/C;IACA,IAAI,CAAC8B,YAAY,CAACjD,GAAG,CAAC;EAE9B;EAEAsC,2BAA2BA,CAAA,EAAG;IAC1B;IACA,OACI,IAAI,CAACrB,MAAM,CAAC,iBAAiB,CAAC,IAC9B,IAAI,CAACA,MAAM,CAACsB,MAAM,IAClB,IAAI,CAACtB,MAAM,CAAC,UAAU,CAAC;EAE/B;EAEAgC,YAAYA,CAACjD,GAAG,EAAE;IACd,IAAI,CAAC,IAAI,CAACgB,WAAW,CAACW,IAAI,EAAE;MACxB,OAAO,IAAI;IACf;;IAEA;IACA,IAAI,IAAI,CAACX,WAAW,CAACW,IAAI,KAAK,GAAG,EAAE;MAC/B,OAAO,KAAK;IAChB;IAEA,MAAMuB,MAAM,GAAG,IAAI,CAAClC,WAAW,CAACW,IAAI,CAC/B1C,IAAI,CAAC,CAAC,CACNkE,WAAW,CAAC,CAAC,CACbjE,KAAK,CAAC,SAAS,CAAC;IACrB,KAAK,MAAMkE,IAAI,IAAIF,MAAM,EAAE;MACvB,IAAIlD,GAAG,CAACO,OAAO,CAAC6C,IAAI,CAAC,KAAK,IAAI,CAAC1B,WAAW,CAAC0B,IAAI,CAAC,EAAE,OAAO,KAAK;IAClE;IACA,OAAO,IAAI;EACf;EAEAC,2BAA2BA,CAACC,SAAS,EAAE;IACnC,MAAM/C,OAAO,GAAG,CAAC,CAAC;IAClB,KAAK,MAAM6C,IAAI,IAAIE,SAAS,EAAE;MAC1B,IAAIzF,eAAe,CAACuF,IAAI,CAAC,EAAE;MAC3B7C,OAAO,CAAC6C,IAAI,CAAC,GAAGE,SAAS,CAACF,IAAI,CAAC;IACnC;IACA;IACA,IAAIE,SAAS,CAACvF,UAAU,EAAE;MACtB,MAAMwF,MAAM,GAAGD,SAAS,CAACvF,UAAU,CAACkB,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,SAAS,CAAC;MAC3D,KAAK,MAAMkE,IAAI,IAAIG,MAAM,EAAE;QACvB,OAAOhD,OAAO,CAAC6C,IAAI,CAAC;MACxB;IACJ;IACA,IAAI7C,OAAO,CAACiD,OAAO,EAAE;MACjB,MAAMC,QAAQ,GAAGlD,OAAO,CAACiD,OAAO,CAACtE,KAAK,CAAC,GAAG,CAAC,CAACwE,MAAM,CAACF,OAAO,IAAI;QAC1D,OAAO,CAAC,iBAAiB,CAACvB,IAAI,CAACuB,OAAO,CAAC;MAC3C,CAAC,CAAC;MACF,IAAI,CAACC,QAAQ,CAAC/D,MAAM,EAAE;QAClB,OAAOa,OAAO,CAACiD,OAAO;MAC1B,CAAC,MAAM;QACHjD,OAAO,CAACiD,OAAO,GAAGC,QAAQ,CAAC9D,IAAI,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC,CAAC;MAC/C;IACJ;IACA,OAAOsB,OAAO;EAClB;EAEAoD,eAAeA,CAAA,EAAG;IACd,MAAMpD,OAAO,GAAG,IAAI,CAAC8C,2BAA2B,CAAC,IAAI,CAACrC,WAAW,CAAC;IAClE,MAAM0B,GAAG,GAAG,IAAI,CAACA,GAAG,CAAC,CAAC;;IAEtB;IACA;IACA,IACIA,GAAG,GAAG,IAAI,GAAG,EAAE,IACf,CAAC,IAAI,CAACN,sBAAsB,CAAC,CAAC,IAC9B,IAAI,CAACU,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,EAC3B;MACEvC,OAAO,CAACiD,OAAO,GACX,CAACjD,OAAO,CAACiD,OAAO,GAAI,GAAEjD,OAAO,CAACiD,OAAQ,IAAG,GAAG,EAAE,IAC9C,uBAAuB;IAC/B;IACAjD,OAAO,CAACmC,GAAG,GAAI,GAAEkB,IAAI,CAACC,KAAK,CAACnB,GAAG,CAAE,EAAC;IAClCnC,OAAO,CAACzC,IAAI,GAAG,IAAIoE,IAAI,CAAC,IAAI,CAACvB,GAAG,CAAC,CAAC,CAAC,CAACmD,WAAW,CAAC,CAAC;IACjD,OAAOvD,OAAO;EAClB;;EAEA;AACJ;AACA;AACA;EACIzC,IAAIA,CAAA,EAAG;IACH,MAAMiG,UAAU,GAAG7B,IAAI,CAAC8B,KAAK,CAAC,IAAI,CAAChD,WAAW,CAAClD,IAAI,CAAC;IACpD,IAAIU,QAAQ,CAACuF,UAAU,CAAC,EAAE;MACtB,OAAOA,UAAU;IACrB;IACA,OAAO,IAAI,CAACrD,aAAa;EAC7B;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIgC,GAAGA,CAAA,EAAG;IACF,IAAIA,GAAG,GAAG,IAAI,CAACuB,SAAS,CAAC,CAAC;IAE1B,MAAMC,YAAY,GAAG,CAAC,IAAI,CAACvD,GAAG,CAAC,CAAC,GAAG,IAAI,CAACD,aAAa,IAAI,IAAI;IAC7D,OAAOgC,GAAG,GAAGwB,YAAY;EAC7B;EAEAD,SAASA,CAAA,EAAG;IACR,OAAO7F,cAAc,CAAC,IAAI,CAAC4C,WAAW,CAAC0B,GAAG,CAAC;EAC/C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACX,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAClB,MAAM,CAAC,UAAU,CAAC,EAAE;MAC7C,OAAO,CAAC;IACZ;;IAEA;IACA;IACA,IACI,IAAI,CAACL,SAAS,IACb,IAAI,CAACI,WAAW,CAAC,YAAY,CAAC,IAC3B,CAAC,IAAI,CAACC,MAAM,CAACsB,MAAM,IACnB,CAAC,IAAI,CAACtB,MAAM,CAACkD,SAAU,EAC7B;MACE,OAAO,CAAC;IACZ;IAEA,IAAI,IAAI,CAACnD,WAAW,CAACW,IAAI,KAAK,GAAG,EAAE;MAC/B,OAAO,CAAC;IACZ;IAEA,IAAI,IAAI,CAACf,SAAS,EAAE;MAChB,IAAI,IAAI,CAACK,MAAM,CAAC,kBAAkB,CAAC,EAAE;QACjC,OAAO,CAAC;MACZ;MACA;MACA,IAAI,IAAI,CAACA,MAAM,CAAC,UAAU,CAAC,EAAE;QACzB,OAAO7C,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,UAAU,CAAC,CAAC;MAClD;IACJ;;IAEA;IACA,IAAI,IAAI,CAACA,MAAM,CAAC,SAAS,CAAC,EAAE;MACxB,OAAO7C,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,SAAS,CAAC,CAAC;IACjD;IAEA,MAAMmD,aAAa,GAAG,IAAI,CAACnD,MAAM,CAACkD,SAAS,GAAG,IAAI,CAACrD,gBAAgB,GAAG,CAAC;IAEvE,MAAMiD,UAAU,GAAG,IAAI,CAACjG,IAAI,CAAC,CAAC;IAC9B,IAAI,IAAI,CAACkD,WAAW,CAACe,OAAO,EAAE;MAC1B,MAAMA,OAAO,GAAGG,IAAI,CAAC8B,KAAK,CAAC,IAAI,CAAChD,WAAW,CAACe,OAAO,CAAC;MACpD;MACA,IAAIsC,MAAM,CAACC,KAAK,CAACvC,OAAO,CAAC,IAAIA,OAAO,GAAGgC,UAAU,EAAE;QAC/C,OAAO,CAAC;MACZ;MACA,OAAOH,IAAI,CAACW,GAAG,CAACH,aAAa,EAAE,CAACrC,OAAO,GAAGgC,UAAU,IAAI,IAAI,CAAC;IACjE;IAEA,IAAI,IAAI,CAAC/C,WAAW,CAAC,eAAe,CAAC,EAAE;MACnC,MAAMwD,YAAY,GAAGtC,IAAI,CAAC8B,KAAK,CAAC,IAAI,CAAChD,WAAW,CAAC,eAAe,CAAC,CAAC;MAClE,IAAIxC,QAAQ,CAACgG,YAAY,CAAC,IAAIT,UAAU,GAAGS,YAAY,EAAE;QACrD,OAAOZ,IAAI,CAACW,GAAG,CACXH,aAAa,EACZ,CAACL,UAAU,GAAGS,YAAY,IAAI,IAAI,GAAI,IAAI,CAAC3D,eAChD,CAAC;MACL;IACJ;IAEA,OAAOuD,aAAa;EACxB;EAEAzB,UAAUA,CAAA,EAAG;IACT,MAAMD,GAAG,GAAG,IAAI,CAACI,MAAM,CAAC,CAAC,GAAG,IAAI,CAACJ,GAAG,CAAC,CAAC;IACtC,MAAM+B,eAAe,GAAG/B,GAAG,GAAGtE,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC3E,MAAMyD,uBAAuB,GAAGhC,GAAG,GAAGtE,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,wBAAwB,CAAC,CAAC;IAC3F,OAAO2C,IAAI,CAACW,GAAG,CAAC,CAAC,EAAE7B,GAAG,EAAE+B,eAAe,EAAEC,uBAAuB,CAAC,GAAG,IAAI;EAC5E;EAEA9B,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACE,MAAM,CAAC,CAAC,IAAI,IAAI,CAACJ,GAAG,CAAC,CAAC;EACtC;EAEAiC,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC7B,MAAM,CAAC,CAAC,GAAG1E,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAACyB,GAAG,CAAC,CAAC;EACrF;EAEAkC,uBAAuBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAC9B,MAAM,CAAC,CAAC,GAAG1E,cAAc,CAAC,IAAI,CAAC6C,MAAM,CAAC,wBAAwB,CAAC,CAAC,GAAG,IAAI,CAACyB,GAAG,CAAC,CAAC;EAC7F;EAEA,OAAOmC,UAAUA,CAACC,GAAG,EAAE;IACnB,OAAO,IAAI,IAAI,CAACxF,SAAS,EAAEA,SAAS,EAAE;MAAEgB,WAAW,EAAEwE;IAAI,CAAC,CAAC;EAC/D;EAEAxE,WAAWA,CAACwE,GAAG,EAAE;IACb,IAAI,IAAI,CAACpE,aAAa,EAAE,MAAMF,KAAK,CAAC,eAAe,CAAC;IACpD,IAAI,CAACsE,GAAG,IAAIA,GAAG,CAACzF,CAAC,KAAK,CAAC,EAAE,MAAMmB,KAAK,CAAC,uBAAuB,CAAC;IAE7D,IAAI,CAACE,aAAa,GAAGoE,GAAG,CAACC,CAAC;IAC1B,IAAI,CAACnE,SAAS,GAAGkE,GAAG,CAACE,EAAE;IACvB,IAAI,CAACnE,eAAe,GAAGiE,GAAG,CAACG,EAAE;IAC7B,IAAI,CAACnE,gBAAgB,GACjBgE,GAAG,CAACI,GAAG,KAAK5F,SAAS,GAAGwF,GAAG,CAACI,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;IACtD,IAAI,CAACnE,OAAO,GAAG+D,GAAG,CAACK,EAAE;IACrB,IAAI,CAACnE,WAAW,GAAG8D,GAAG,CAACM,IAAI;IAC3B,IAAI,CAACnE,MAAM,GAAG6D,GAAG,CAACO,KAAK;IACvB,IAAI,CAACnE,OAAO,GAAG4D,GAAG,CAACQ,CAAC;IACpB,IAAI,CAAClE,IAAI,GAAG0D,GAAG,CAACS,CAAC;IACjB,IAAI,CAACjE,KAAK,GAAGwD,GAAG,CAACU,CAAC;IAClB,IAAI,CAAChE,gBAAgB,GAAGsD,GAAG,CAACW,CAAC;IAC7B,IAAI,CAAC/D,WAAW,GAAGoD,GAAG,CAACY,IAAI;IAC3B,IAAI,CAAC9D,MAAM,GAAGkD,GAAG,CAACa,KAAK;EAC3B;EAEAC,QAAQA,CAAA,EAAG;IACP,OAAO;MACHvG,CAAC,EAAE,CAAC;MACJ0F,CAAC,EAAE,IAAI,CAACrE,aAAa;MACrBsE,EAAE,EAAE,IAAI,CAACpE,SAAS;MAClBqE,EAAE,EAAE,IAAI,CAACpE,eAAe;MACxBqE,GAAG,EAAE,IAAI,CAACpE,gBAAgB;MAC1BqE,EAAE,EAAE,IAAI,CAACpE,OAAO;MAChBqE,IAAI,EAAE,IAAI,CAACpE,WAAW;MACtBqE,KAAK,EAAE,IAAI,CAACpE,MAAM;MAClBqE,CAAC,EAAE,IAAI,CAACpE,OAAO;MACfqE,CAAC,EAAE,IAAI,CAACnE,IAAI;MACZoE,CAAC,EAAE,IAAI,CAAClE,KAAK;MACbmE,CAAC,EAAE,IAAI,CAACjE,gBAAgB;MACxBkE,IAAI,EAAE,IAAI,CAAChE,WAAW;MACtBiE,KAAK,EAAE,IAAI,CAAC/D;IAChB,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIiE,mBAAmBA,CAACC,WAAW,EAAE;IAC7B,IAAI,CAACrF,wBAAwB,CAACqF,WAAW,CAAC;IAC1C,MAAMvF,OAAO,GAAG,IAAI,CAAC8C,2BAA2B,CAACyC,WAAW,CAACvF,OAAO,CAAC;;IAErE;IACA,OAAOA,OAAO,CAAC,UAAU,CAAC;IAE1B,IAAI,CAAC,IAAI,CAACwC,eAAe,CAAC+C,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC3D,QAAQ,CAAC,CAAC,EAAE;MAC9D;MACA;MACA,OAAO5B,OAAO,CAAC,eAAe,CAAC;MAC/B,OAAOA,OAAO,CAAC,mBAAmB,CAAC;MACnC,OAAOA,OAAO;IAClB;;IAEA;IACA,IAAI,IAAI,CAACS,WAAW,CAAC+E,IAAI,EAAE;MACvBxF,OAAO,CAAC,eAAe,CAAC,GAAGA,OAAO,CAAC,eAAe,CAAC,GAC5C,GAAEA,OAAO,CAAC,eAAe,CAAE,KAAI,IAAI,CAACS,WAAW,CAAC+E,IAAK,EAAC,GACvD,IAAI,CAAC/E,WAAW,CAAC+E,IAAI;IAC/B;;IAEA;IACA,MAAMC,qBAAqB,GACvBzF,OAAO,CAAC,eAAe,CAAC,IACxBA,OAAO,CAAC,UAAU,CAAC,IACnBA,OAAO,CAAC,qBAAqB,CAAC,IAC7B,IAAI,CAACW,OAAO,IAAI,IAAI,CAACA,OAAO,IAAI,KAAM;;IAE3C;AACR;IACQ,IAAI8E,qBAAqB,EAAE;MACvB,OAAOzF,OAAO,CAAC,mBAAmB,CAAC;MAEnC,IAAIA,OAAO,CAAC,eAAe,CAAC,EAAE;QAC1B,MAAM0F,KAAK,GAAG1F,OAAO,CAAC,eAAe,CAAC,CACjCrB,KAAK,CAAC,GAAG,CAAC,CACVwE,MAAM,CAACqC,IAAI,IAAI;UACZ,OAAO,CAAC,SAAS,CAAC9D,IAAI,CAAC8D,IAAI,CAAC;QAChC,CAAC,CAAC;QACN,IAAI,CAACE,KAAK,CAACvG,MAAM,EAAE;UACf,OAAOa,OAAO,CAAC,eAAe,CAAC;QACnC,CAAC,MAAM;UACHA,OAAO,CAAC,eAAe,CAAC,GAAG0F,KAAK,CAACtG,IAAI,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC,CAAC;QACrD;MACJ;IACJ,CAAC,MAAM,IACH,IAAI,CAAC+B,WAAW,CAAC,eAAe,CAAC,IACjC,CAACT,OAAO,CAAC,mBAAmB,CAAC,EAC/B;MACEA,OAAO,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAACS,WAAW,CAAC,eAAe,CAAC;IACpE;IAEA,OAAOT,OAAO;EAClB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2F,iBAAiBA,CAACC,OAAO,EAAEzH,QAAQ,EAAE;IACjC,IAAI,CAAC+B,wBAAwB,CAAC0F,OAAO,CAAC;IACtC,IAAG,IAAI,CAACxB,gBAAgB,CAAC,CAAC,IAAIlG,eAAe,CAACC,QAAQ,CAAC,EAAE;MAAG;MAC1D,OAAO;QACL0H,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE;MACV,CAAC;IACH;IACA,IAAI,CAAC5H,QAAQ,IAAI,CAACA,QAAQ,CAAC6B,OAAO,EAAE;MAChC,MAAMC,KAAK,CAAC,0BAA0B,CAAC;IAC3C;;IAEA;IACA;IACA,IAAI6F,OAAO,GAAG,KAAK;IACnB,IAAI3H,QAAQ,CAACE,MAAM,KAAKU,SAAS,IAAIZ,QAAQ,CAACE,MAAM,IAAI,GAAG,EAAE;MACzDyH,OAAO,GAAG,KAAK;IACnB,CAAC,MAAM,IACH3H,QAAQ,CAAC6B,OAAO,CAACwF,IAAI,IACrB,CAAC,SAAS,CAAC9D,IAAI,CAACvD,QAAQ,CAAC6B,OAAO,CAACwF,IAAI,CAAC,EACxC;MACE;MACA;MACA;MACAM,OAAO,GACH,IAAI,CAACrF,WAAW,CAAC+E,IAAI,IACrB,IAAI,CAAC/E,WAAW,CAAC+E,IAAI,CAACxG,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,KACxCb,QAAQ,CAAC6B,OAAO,CAACwF,IAAI;IACjC,CAAC,MAAM,IAAI,IAAI,CAAC/E,WAAW,CAAC+E,IAAI,IAAIrH,QAAQ,CAAC6B,OAAO,CAACwF,IAAI,EAAE;MACvD;MACA;MACA;MACAM,OAAO,GACH,IAAI,CAACrF,WAAW,CAAC+E,IAAI,CAACxG,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,KAC5Cb,QAAQ,CAAC6B,OAAO,CAACwF,IAAI,CAACxG,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACpD,CAAC,MAAM,IAAI,IAAI,CAACyB,WAAW,CAAC,eAAe,CAAC,EAAE;MAC1CqF,OAAO,GACH,IAAI,CAACrF,WAAW,CAAC,eAAe,CAAC,KACjCtC,QAAQ,CAAC6B,OAAO,CAAC,eAAe,CAAC;IACzC,CAAC,MAAM;MACH;MACA;MACA;MACA;MACA,IACI,CAAC,IAAI,CAACS,WAAW,CAAC+E,IAAI,IACtB,CAAC,IAAI,CAAC/E,WAAW,CAAC,eAAe,CAAC,IAClC,CAACtC,QAAQ,CAAC6B,OAAO,CAACwF,IAAI,IACtB,CAACrH,QAAQ,CAAC6B,OAAO,CAAC,eAAe,CAAC,EACpC;QACE8F,OAAO,GAAG,IAAI;MAClB;IACJ;IAEA,IAAI,CAACA,OAAO,EAAE;MACV,OAAO;QACHC,MAAM,EAAE,IAAI,IAAI,CAACvG,WAAW,CAACoG,OAAO,EAAEzH,QAAQ,CAAC;QAC/C;QACA;QACA;QACA0H,QAAQ,EAAE1H,QAAQ,CAACE,MAAM,IAAI,GAAG;QAChCyH,OAAO,EAAE;MACb,CAAC;IACL;;IAEA;IACA;IACA,MAAM9F,OAAO,GAAG,CAAC,CAAC;IAClB,KAAK,MAAMnB,CAAC,IAAI,IAAI,CAAC4B,WAAW,EAAE;MAC9BT,OAAO,CAACnB,CAAC,CAAC,GACNA,CAAC,IAAIV,QAAQ,CAAC6B,OAAO,IAAI,CAACpC,8BAA8B,CAACiB,CAAC,CAAC,GACrDV,QAAQ,CAAC6B,OAAO,CAACnB,CAAC,CAAC,GACnB,IAAI,CAAC4B,WAAW,CAAC5B,CAAC,CAAC;IACjC;IAEA,MAAMmH,WAAW,GAAG1E,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEpD,QAAQ,EAAE;MAC5CE,MAAM,EAAE,IAAI,CAACmC,OAAO;MACpBI,MAAM,EAAE,IAAI,CAACD,OAAO;MACpBX;IACJ,CAAC,CAAC;IACF,OAAO;MACH+F,MAAM,EAAE,IAAI,IAAI,CAACvG,WAAW,CAACoG,OAAO,EAAEI,WAAW,EAAE;QAC/CrG,MAAM,EAAE,IAAI,CAACU,SAAS;QACtBT,cAAc,EAAE,IAAI,CAACU,eAAe;QACpCT,sBAAsB,EAAE,IAAI,CAACU;MACjC,CAAC,CAAC;MACFsF,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE;IACb,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}