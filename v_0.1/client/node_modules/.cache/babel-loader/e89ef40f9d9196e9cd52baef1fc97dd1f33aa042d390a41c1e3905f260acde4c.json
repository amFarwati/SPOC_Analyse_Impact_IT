{"ast":null,"code":"import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SVGContext, DrawingContext } from '../context/DrawingProvider';\nimport { isBandScale } from '../internals/isBandScale';\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = React.useContext(SVGContext);\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n      const {\n        scale,\n        data: axisData\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const closestIndex = axisData == null ? void 0 : axisData.findIndex((v, index) => {\n          if (v > value) {\n            // @ts-ignore\n            if (index === 0 || Math.abs(value - v) <= Math.abs(value - axisData[index - 1])) {\n              return true;\n            }\n          }\n          if (v <= value) {\n            if (index === axisData.length - 1 ||\n            // @ts-ignore\n            Math.abs(value - v) < Math.abs(value - axisData[index + 1])) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: null,\n          y: null\n        }\n      });\n    };\n    const handleMouseMove = event => {\n      // Get mouse coordinate in global SVG space\n      const pt = svgRef.current.createSVGPoint();\n      pt.x = event.clientX;\n      pt.y = event.clientY;\n      const svgPt = pt.matrixTransform(svgRef.current.getScreenCTM().inverse());\n      mousePosition.current = {\n        x: svgPt.x,\n        y: svgPt.y\n      };\n      const outsideX = svgPt.x < left || svgPt.x > left + width;\n      const outsideY = svgPt.y < top || svgPt.y > top + height;\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'updateAxis',\n          data: {\n            x: null,\n            y: null\n          }\n        });\n        return;\n      }\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPt.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPt.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};","map":{"version":3,"names":["React","InteractionContext","CartesianContext","SVGContext","DrawingContext","isBandScale","useAxisEvents","disableAxisListener","svgRef","useContext","width","height","top","left","xAxis","yAxis","xAxisIds","yAxisIds","dispatch","usedXAxis","usedYAxis","mousePosition","useRef","x","y","useEffect","element","current","getUpdate","axisConfig","mouseValue","scale","data","axisData","value","invert","undefined","closestIndex","findIndex","v","index","Math","abs","length","dataIndex","bandwidth","floor","min","range","step","handleMouseOut","type","handleMouseMove","event","pt","createSVGPoint","clientX","clientY","svgPt","matrixTransform","getScreenCTM","inverse","outsideX","outsideY","newStateX","newStateY","addEventListener","removeEventListener"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.0/client/node_modules/@mui/x-charts/esm/hooks/useAxisEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SVGContext, DrawingContext } from '../context/DrawingProvider';\nimport { isBandScale } from '../internals/isBandScale';\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = React.useContext(SVGContext);\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n      const {\n        scale,\n        data: axisData\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const closestIndex = axisData == null ? void 0 : axisData.findIndex((v, index) => {\n          if (v > value) {\n            // @ts-ignore\n            if (index === 0 || Math.abs(value - v) <= Math.abs(value - axisData[index - 1])) {\n              return true;\n            }\n          }\n          if (v <= value) {\n            if (index === axisData.length - 1 ||\n            // @ts-ignore\n            Math.abs(value - v) < Math.abs(value - axisData[index + 1])) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: null,\n          y: null\n        }\n      });\n    };\n    const handleMouseMove = event => {\n      // Get mouse coordinate in global SVG space\n      const pt = svgRef.current.createSVGPoint();\n      pt.x = event.clientX;\n      pt.y = event.clientY;\n      const svgPt = pt.matrixTransform(svgRef.current.getScreenCTM().inverse());\n      mousePosition.current = {\n        x: svgPt.x,\n        y: svgPt.y\n      };\n      const outsideX = svgPt.x < left || svgPt.x > left + width;\n      const outsideY = svgPt.y < top || svgPt.y > top + height;\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'updateAxis',\n          data: {\n            x: null,\n            y: null\n          }\n        });\n        return;\n      }\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPt.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPt.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}