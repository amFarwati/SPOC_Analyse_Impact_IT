{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"],\n  _excluded4 = [\"disableColorInversion\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n      className,\n      elementType: initialElementType,\n      ownerState,\n      externalForwardedProps,\n      getSlotOwnerState,\n      internalForwardedProps\n    } = parameters,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const {\n      component: rootComponent,\n      slots = {\n        [name]: undefined\n      },\n      slotProps = {\n        [name]: undefined\n      }\n    } = externalForwardedProps,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const _mergeSlotProps = mergeSlotProps(_extends({\n      className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    {\n      props: {\n        component: slotComponent\n      },\n      internalRef\n    } = _mergeSlotProps,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  const _ref = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {},\n    {\n      disableColorInversion = false\n    } = _ref,\n    slotOwnerState = _objectWithoutPropertiesLoose(_ref, _excluded4);\n  const finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  const {\n    getColor\n  } = useColorInversion(finalOwnerState.variant);\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","_excluded3","_excluded4","unstable_useForkRef","useForkRef","appendOwnerState","resolveComponentProps","mergeSlotProps","useColorInversion","useSlot","name","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","component","rootComponent","slots","undefined","slotProps","other","resolvedComponentsProps","_mergeSlotProps","externalSlotProps","props","slotComponent","internalRef","mergedProps","ref","_ref","disableColorInversion","slotOwnerState","finalOwnerState","getColor","variant","_color","color","LeafComponent","as","Object","keys","forEach","propName"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.0/node_modules/@mui/joy/utils/useSlot.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"],\n  _excluded4 = [\"disableColorInversion\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n      className,\n      elementType: initialElementType,\n      ownerState,\n      externalForwardedProps,\n      getSlotOwnerState,\n      internalForwardedProps\n    } = parameters,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const {\n      component: rootComponent,\n      slots = {\n        [name]: undefined\n      },\n      slotProps = {\n        [name]: undefined\n      }\n    } = externalForwardedProps,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const _mergeSlotProps = mergeSlotProps(_extends({\n      className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    {\n      props: {\n        component: slotComponent\n      },\n      internalRef\n    } = _mergeSlotProps,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  const _ref = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {},\n    {\n      disableColorInversion = false\n    } = _ref,\n    slotOwnerState = _objectWithoutPropertiesLoose(_ref, _excluded4);\n  const finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  const {\n    getColor\n  } = useColorInversion(finalOwnerState.variant);\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,wBAAwB,CAAC;EACnIC,UAAU,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,WAAW,CAAC;EAChDC,UAAU,GAAG,CAAC,WAAW,CAAC;EAC1BC,UAAU,GAAG,CAAC,uBAAuB,CAAC;AACxC,SAASC,mBAAmB,IAAIC,UAAU,QAAQ,YAAY;AAC9D,SAASC,gBAAgB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ,iBAAiB;AACzF,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAOA;AAC/B;AACA;AACA;AACA;AACA;AACA;AACAC,IAAI,EAAEC,UAAU,EAAE;EAChB,MAAM;MACFC,SAAS;MACTC,WAAW,EAAEC,kBAAkB;MAC/BC,UAAU;MACVC,sBAAsB;MACtBC,iBAAiB;MACjBC;IACF,CAAC,GAAGP,UAAU;IACdQ,kBAAkB,GAAGrB,6BAA6B,CAACa,UAAU,EAAEZ,SAAS,CAAC;EAC3E,MAAM;MACFqB,SAAS,EAAEC,aAAa;MACxBC,KAAK,GAAG;QACN,CAACZ,IAAI,GAAGa;MACV,CAAC;MACDC,SAAS,GAAG;QACV,CAACd,IAAI,GAAGa;MACV;IACF,CAAC,GAAGP,sBAAsB;IAC1BS,KAAK,GAAG3B,6BAA6B,CAACkB,sBAAsB,EAAEhB,UAAU,CAAC;EAC3E,MAAMa,WAAW,GAAGS,KAAK,CAACZ,IAAI,CAAC,IAAII,kBAAkB;;EAErD;EACA;EACA,MAAMY,uBAAuB,GAAGpB,qBAAqB,CAACkB,SAAS,CAACd,IAAI,CAAC,EAAEK,UAAU,CAAC;EAClF,MAAMY,eAAe,GAAGpB,cAAc,CAACV,QAAQ,CAAC;MAC5Ce;IACF,CAAC,EAAEO,kBAAkB,EAAE;MACrBH,sBAAsB,EAAEN,IAAI,KAAK,MAAM,GAAGe,KAAK,GAAGF,SAAS;MAC3DK,iBAAiB,EAAEF;IACrB,CAAC,CAAC,CAAC;IACH;MACEG,KAAK,EAAE;QACLT,SAAS,EAAEU;MACb,CAAC;MACDC;IACF,CAAC,GAAGJ,eAAe;IACnBK,WAAW,GAAGlC,6BAA6B,CAAC6B,eAAe,CAACE,KAAK,EAAE5B,UAAU,CAAC;EAChF,MAAMgC,GAAG,GAAG7B,UAAU,CAAC2B,WAAW,EAAEL,uBAAuB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,uBAAuB,CAACO,GAAG,EAAEtB,UAAU,CAACsB,GAAG,CAAC;;EAE3H;EACA,MAAMC,IAAI,GAAGjB,iBAAiB,GAAGA,iBAAiB,CAACe,WAAW,CAAC,GAAG,CAAC,CAAC;IAClE;MACEG,qBAAqB,GAAG;IAC1B,CAAC,GAAGD,IAAI;IACRE,cAAc,GAAGtC,6BAA6B,CAACoC,IAAI,EAAEhC,UAAU,CAAC;EAClE,MAAMmC,eAAe,GAAGxC,QAAQ,CAAC,CAAC,CAAC,EAAEkB,UAAU,EAAEqB,cAAc,CAAC;EAChE,MAAM;IACJE;EACF,CAAC,GAAG9B,iBAAiB,CAAC6B,eAAe,CAACE,OAAO,CAAC;EAC9C,IAAI7B,IAAI,KAAK,MAAM,EAAE;IACnB,IAAI8B,MAAM;IACV;IACAH,eAAe,CAACI,KAAK,GAAG,CAACD,MAAM,GAAGR,WAAW,CAACS,KAAK,KAAK,IAAI,GAAGD,MAAM,GAAGzB,UAAU,CAAC0B,KAAK;EAC1F,CAAC,MAAM,IAAI,CAACN,qBAAqB,EAAE;IACjCE,eAAe,CAACI,KAAK,GAAGH,QAAQ,CAACN,WAAW,CAACS,KAAK,EAAEJ,eAAe,CAACI,KAAK,CAAC;EAC5E;EACA,MAAMC,aAAa,GAAGhC,IAAI,KAAK,MAAM,GAAGoB,aAAa,IAAIT,aAAa,GAAGS,aAAa;EACtF,MAAMD,KAAK,GAAGxB,gBAAgB,CAACQ,WAAW,EAAEhB,QAAQ,CAAC,CAAC,CAAC,EAAEa,IAAI,KAAK,MAAM,IAAI,CAACW,aAAa,IAAI,CAACC,KAAK,CAACZ,IAAI,CAAC,IAAIQ,sBAAsB,EAAER,IAAI,KAAK,MAAM,IAAI,CAACY,KAAK,CAACZ,IAAI,CAAC,IAAIQ,sBAAsB,EAAEc,WAAW,EAAEU,aAAa,IAAI;IAC7NC,EAAE,EAAED;EACN,CAAC,EAAE;IACDT;EACF,CAAC,CAAC,EAAEI,eAAe,CAAC;EACpBO,MAAM,CAACC,IAAI,CAACT,cAAc,CAAC,CAACU,OAAO,CAACC,QAAQ,IAAI;IAC9C,OAAOlB,KAAK,CAACkB,QAAQ,CAAC;EACxB,CAAC,CAAC;EACF,OAAO,CAAClC,WAAW,EAAEgB,KAAK,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}