{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from 'd3-shape';\nimport { getStackingGroups } from '../internals/stackSeries';\nimport defaultizeValueFormatter from '../internals/defaultizeValueFormatter';\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset != null ? dataset : [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({}, series[id], {\n        data: dataKey ? dataset.map(d => d[dataKey]) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v.toLocaleString())\n  };\n};\nexport default formatter;","map":{"version":3,"names":["_extends","stack","d3Stack","getStackingGroups","defaultizeValueFormatter","formatter","params","dataset","seriesOrder","series","stackingGroups","d3Dataset","forEach","id","data","undefined","value","index","length","push","Error","join","completedSeries","stackingGroup","ids","stackingOrder","stackingOffset","stackedSeries","keys","map","dataKey","order","offset","d","stackedData","a","b","v","toLocaleString"],"sources":["/home/amfarwati/Documents/SPOC_Analyse_Impact_IT/v_0.1/client/node_modules/@mui/x-charts/esm/LineChart/formatter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from 'd3-shape';\nimport { getStackingGroups } from '../internals/stackSeries';\nimport defaultizeValueFormatter from '../internals/defaultizeValueFormatter';\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset != null ? dataset : [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({}, series[id], {\n        data: dataKey ? dataset.map(d => d[dataKey]) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v.toLocaleString())\n  };\n};\nexport default formatter;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}